<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ExpressionToValue</title>
    <url>/ExpressionToValue.html</url>
    <content><![CDATA[<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">

<h1 id="表达式求值-wpf"><a href="#表达式求值-wpf" class="headerlink" title="表达式求值  wpf"></a>表达式求值  wpf</h1><p>主要思想：表达式递归切割求值。</p>
<p>主要分成三个类。Expression，item和factor。</p>
<p><img src="https://i.loli.net/2020/05/18/D36Pi85OzXsHYqI.png" alt="1589730555323.png"></p>
<h1 id="Expression（-）"><a href="#Expression（-）" class="headerlink" title="Expression（+/-）"></a>Expression（+/-）</h1><p>由divStringExp类的divexp（）方法分割字符串</p>
<p>将表达式中的加法和减法消除。</p>
<p>先用栈找出最外层的括号：</p>
<p><img src="https://i.loli.net/2020/05/18/9yvzgBIKtb4h1Fr.png" alt="1589730585178.png"></p>
<p>然后往括号两端扩展</p>
<p><img src="https://i.loli.net/2020/05/18/wQOiU6col4kmjx2.png" alt="1589730598531.png"></p>
<p>切割加号得到两个items</p>
<h1 id="Item"><a href="#Item" class="headerlink" title="Item"></a>Item</h1><p>把字符串分成被除数和除数</p>
<p>分两种情况：有括号和无括号</p>
<h2 id="有括号的情况："><a href="#有括号的情况：" class="headerlink" title="有括号的情况："></a>有括号的情况：</h2><p>同样是用栈判断最外层的括号</p>
<p><img src="https://i.loli.net/2020/05/18/r9RHuIQCJpPechX.png" alt="1589730611640.png"></p>
<p>把括号内的乘号和除号省略，分割外面的乘号和除号</p>
<p>并把除数之间和被除数之间相连（或者用两个数组将分子和分母保存起来）</p>
<p><img src="https://i.loli.net/2020/05/18/MzuFHbxXe1aEsKC.png" alt="1589730620914.png"></p>
<h2 id="没括号的情况："><a href="#没括号的情况：" class="headerlink" title="没括号的情况："></a>没括号的情况：</h2><p>遇到除号将后面的除数加到除数字符串   </p>
<h1 id="Factor"><a href="#Factor" class="headerlink" title="Factor"></a>Factor</h1><p>拆开最外层括号外的乘号</p>
<p>剩下的元素分成5种情况</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="一元函数"><a href="#一元函数" class="headerlink" title="一元函数"></a>一元函数</h4><p>递归求括号内的值，再代入函数</p>
<p>例如sin(exp)</p>
<h4 id="多元函数（目前只有log（a-b）函数）"><a href="#多元函数（目前只有log（a-b）函数）" class="headerlink" title="多元函数（目前只有log（a,b）函数）"></a>多元函数（目前只有log（a,b）函数）</h4><p>例如log(a,log(b,c))，将括号内提出来“a,log(b,c)”</p>
<p>将没在括号内的，分割</p>
<p>分成“a“和”log(b,c)”再分别递归求值。</p>
<h3 id="次方"><a href="#次方" class="headerlink" title="次方"></a>次方</h3><p>求最外层括号外的次方</p>
<p>最外层是括号：</p>
<p>拆括号后递归求值</p>
<p><strong>注意：次方内可能也有多个表达式</strong></p>
<p>例如:2^sin(a)</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>找coefficient类将值返回</p>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>用table.Compute（）方法转化</p>
<h1 id="参数（Coefficient）类"><a href="#参数（Coefficient）类" class="headerlink" title="参数（Coefficient）类"></a>参数（Coefficient）类</h1><p>正则表达式找变量并忽略掉所有的函数名，并初始赋值1</p>
<h1 id="tool类"><a href="#tool类" class="headerlink" title="tool类"></a>tool类</h1><p>装有静态的函数名对象，方便外界访问</p>
<h1 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h1><p>Stackpanel中嵌套三个Grid布局</p>
<p><img src="https://i.loli.net/2020/05/18/wpmizh45WgBr3GL.png" alt="1589730840570.png"></p>
<h2 id="Grid布局1"><a href="#Grid布局1" class="headerlink" title="Grid布局1"></a>Grid布局1</h2><p>计算结果用label显示</p>
<h2 id="Grid布局2"><a href="#Grid布局2" class="headerlink" title="Grid布局2"></a>Grid布局2</h2><p>四个listbox分别显示变量名，范围，滑块，变量值</p>
<h2 id="Grid布局3"><a href="#Grid布局3" class="headerlink" title="Grid布局3"></a>Grid布局3</h2><p>输入栏和确定按钮</p>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h5 id="确定按钮click事件"><a href="#确定按钮click事件" class="headerlink" title="确定按钮click事件"></a>确定按钮click事件</h5><p>初始化动态添加元素到四个listbox</p>
<h5 id="变量范围keydown事件"><a href="#变量范围keydown事件" class="headerlink" title="变量范围keydown事件"></a>变量范围keydown事件</h5><p>判断输入是否是数字</p>
<h5 id="四个listbox滑动条同步事件"><a href="#四个listbox滑动条同步事件" class="headerlink" title="四个listbox滑动条同步事件"></a>四个listbox滑动条同步事件</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">VisualTreeHelper.GetChild(VisualTreeHelper.GetChild(<span class="keyword">this</span>.listBox4, <span class="number">0</span>), <span class="number">0</span>) <span class="keyword">as</span> ScrollViewer;<span class="comment">//找到scrollviewer对象</span></span><br><span class="line">		sv4.ScrollChanged += newScrollChangedEventHandler(listBox4_ScrollChanged);</span><br><span class="line"><span class="comment">//添加事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listBox4_ScrollChanged</span>(<span class="params"><span class="built_in">object</span> sender, ScrollChangedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        <span class="keyword">if</span> (sv4 != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sv3.ScrollToVerticalOffset(sv4.VerticalOffset);</span><br><span class="line">            sv2.ScrollToVerticalOffset(sv4.VerticalOffset);</span><br><span class="line">            sv1.ScrollToVerticalOffset(sv4.VerticalOffset);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="双击变量名产生滑块动画事件"><a href="#双击变量名产生滑块动画事件" class="headerlink" title="双击变量名产生滑块动画事件"></a>双击变量名产生滑块动画事件</h5><p>System.Windows.Threading.DispatcherTimer类用于动画制作</p>
<p>该类用Interval方法设置事件的发生间隔</p>
<p>tmr.Interval = TimeSpan.FromSeconds(0.01);</p>
<p>给他的tick事件添加委托threads方法</p>
<p>start方法启用</p>
<p>判断条件满足后停止</p>
<p>end方法终止</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">animation</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Label label = sender <span class="keyword">as</span> Label;</span><br><span class="line">            <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span>(Label l1 <span class="keyword">in</span> listBox1.Items)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span> (l1 == label)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ProcessToanimation = <span class="number">0</span>;</span><br><span class="line">            CountToAnimation = count;</span><br><span class="line">            System.Windows.Threading.DispatcherTimer tmr = <span class="keyword">new</span> System.Windows.Threading.DispatcherTimer();</span><br><span class="line">            tmr.Interval = TimeSpan.FromSeconds(<span class="number">0.01</span>);</span><br><span class="line">            tmr.Tick += <span class="keyword">new</span> EventHandler(threads);</span><br><span class="line">            tmr.Start();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">threads</span>(<span class="params"><span class="built_in">object</span> c,EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> count = CountToAnimation;</span><br><span class="line">            slidersList[count<span class="number">-1</span>].Value = ProcessToanimation;</span><br><span class="line">            <span class="built_in">double</span> td = (slidersList[count - <span class="number">1</span>].Value - <span class="number">5</span>) * Convert.ToDouble(rangesList[count - <span class="number">1</span>].Text);</span><br><span class="line">            td = td / <span class="number">5</span>;</span><br><span class="line">            valuesList[count - <span class="number">1</span>].Content = td;</span><br><span class="line">            variableCollection.vlist[count - <span class="number">1</span>].<span class="keyword">value</span> = td;</span><br><span class="line">            exp.setVariables(variableCollection);</span><br><span class="line">            result.Content = exp.getValue();</span><br><span class="line">            ProcessToanimation += <span class="number">0.025</span>;</span><br><span class="line">            <span class="keyword">if</span> (ProcessToanimation &gt;= <span class="number">10</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                slidersList[count<span class="number">-1</span>].Value = <span class="number">6</span>;</span><br><span class="line">                <span class="built_in">double</span> ts = (slidersList[count - <span class="number">1</span>].Value - <span class="number">5</span>) * Convert.ToDouble(rangesList[count - <span class="number">1</span>].Text)/<span class="number">5</span>;</span><br><span class="line">                valuesList[count - <span class="number">1</span>].Content = ts;</span><br><span class="line">                variableCollection.vlist[count - <span class="number">1</span>].<span class="keyword">value</span> = ts;</span><br><span class="line">                exp.setVariables(variableCollection);</span><br><span class="line">                result.Content = exp.getValue();</span><br><span class="line">                (c <span class="keyword">as</span> System.Windows.Threading.DispatcherTimer).Stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e1)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>程序</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>表达式求值</tag>
      </tags>
  </entry>
  <entry>
    <title>Summer Pockets -REFLECTION BLUE- 玩后感</title>
    <url>/Summer-Pockets-REFLECTION-BLUE-%E7%8E%A9%E5%90%8E%E6%84%9F.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="e560c5b15835a256035331a81c198d7a2d017e317ba73ac3c0b7aa989dc31e5f"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>POJ - 1611-day3-F</title>
    <url>/POJ-1611-day3-F.html</url>
    <content><![CDATA[<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">

<h1 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h1><p><a href="http://poj.org/problem?id=1611">POJ - 1611</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>Severe acute respiratory syndrome (SARS), an atypical pneumonia of unknown aetiology, was recognized as a global threat in mid-March 2003. To minimize transmission to others, the best strategy is to separate the suspects from others.<br>In the Not-Spreading-Your-Sickness University (NSYSU), there are many student groups. Students in the same group intercommunicate with each other frequently, and a student may join several groups. To prevent the possible transmissions of SARS, the NSYSU collects the member lists of all student groups, and makes the following rule in their standard operation procedure (SOP).<br>Once a member in a group is a suspect, all members in the group are suspects.<br>However, they find that it is not easy to identify all the suspects when a student is recognized as a suspect. Your job is to write a program which finds all the suspects.</p>
<h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>The input file contains several cases. Each test case begins with two integers n and m in a line, where n is the number of students, and m is the number of groups. You may assume that 0 &lt; n &lt;= 30000 and 0 &lt;= m &lt;= 500. Every student is numbered by a unique integer between 0 and n−1, and initially student 0 is recognized as a suspect in all the cases. This line is followed by m member lists of the groups, one line per group. Each line begins with an integer k by itself representing the number of members in the group. Following the number of members, there are k integers representing the students in this group. All the integers in a line are separated by at least one space.<br>A case with n = 0 and m = 0 indicates the end of the input, and need not be processed.</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>For each case, output the number of suspects in one line.</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>input</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100 4</span><br><span class="line">2 1 2</span><br><span class="line">5 10 13 11 12 14</span><br><span class="line">2 0 1</span><br><span class="line">2 99 2</span><br><span class="line">200 2</span><br><span class="line">1 5</span><br><span class="line">5 1 2 3 4 5</span><br><span class="line">1 0</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>并查集，找与0有关的所有人，用bb数组来存放头目有关的人数，最后找0的头目，就能在数组里找到所有与他有关的人。</p>
<h1 id="AC的代码"><a href="#AC的代码" class="headerlink" title="AC的代码"></a>AC的代码</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> gro,s,aa[<span class="number">30005</span>],bb[<span class="number">30005</span>],cc[<span class="number">30005</span>];    <span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span>                 <span class="comment">//寻找根节点的函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (aa[x] == x)</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		aa[x] = find(aa[x]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x1 = find(x);</span><br><span class="line">	<span class="keyword">int</span> y1 = find(y);</span><br><span class="line">	<span class="keyword">if</span> (x1 != y1)            <span class="comment">//根节点不同连接</span></span><br><span class="line">	&#123;</span><br><span class="line">		aa[x1] = y1;</span><br><span class="line">		bb[y1] = bb[x1] + bb[y1];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s &gt;&gt; gro)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">30005</span>; r++)</span><br><span class="line">		&#123;</span><br><span class="line">			aa[r] = r;</span><br><span class="line">			bb[r] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> f = <span class="number">0</span>; f &lt; gro; f++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> p;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">0</span>; q &lt; p; q++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;cc[q]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; p - <span class="number">1</span>; x++)</span><br><span class="line">			&#123;</span><br><span class="line">				join(cc[x], cc[x + <span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> k = find(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; bb[k] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>TSPppt</title>
    <url>/TSPppt.html</url>
    <content><![CDATA[<me ta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">


<h1 id="TSP的几个算法"><a href="#TSP的几个算法" class="headerlink" title="TSP的几个算法"></a>TSP的几个算法</h1><p>这是一个自己做的ppt的记录。</p>
<h2 id="TSP实例"><a href="#TSP实例" class="headerlink" title="TSP实例"></a>TSP实例</h2><p>有一位商人，他想访问德国的某些城市，要求：</p>
<ol>
<li>所走路程最短；</li>
<li>每个城市只能访问一次；</li>
<li>从某城市出发，最后回到该城市。</li>
</ol>
<p><img src="https://i.loli.net/2019/09/23/ivBU6RxodJYnZKr.png" alt="1568996702133 - 副本.png"></p>
<p>让我们看一下为什么要学这个问题，主要来看一下tsp到底有什么用。</p>
<p><img src="https://i.loli.net/2020/08/21/FcSKANeDQJy5Zdo.png" alt="tspzuoyong.png"></p>
<p>看完了应用，我们来看一下怎么去解决这个问题吧</p>
<p>首先先任意选一个点作为起点，然后开始连接就可以看到有n！种情况</p>
<p><img src="https://i.loli.net/2019/09/23/iCTeADruUnYm9Ia.png" alt="1569036262994 - 副本.png"></p>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>我们尝试优化一下，目前最好的优化是通过动态规划去解决，复杂度为o（2^n*n^2）</p>
<p>首先得懂得为什么可以使用动态规划，<strong>动态规划就是在求解一个复杂问题时，将其分解为若干个简单问题。通过求解简单问题的最优解，来找到目标问题的最优解。</strong></p>
<p><strong>使用动态规划，需要问题本身有最优子结构</strong>，我们需要找到要解决的问题的子问题。</p>
<p>现在找一下tsp的最优子结构</p>
<p><img src="https://i.loli.net/2019/09/23/WFVGmarTHC384hi.png" alt="1569036739438 - 副本.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从0出发，经过[1,2,3]这几个城市，然后回到0，使得花费最少。要实现这个要求，需要从下面三个实现方案中选择花费最少的方案。</span><br></pre></td></tr></table></figure>

<p>　　　　1、 从0出发，到1，然后再从1出发，经过[2,3]这几个城市，然后回到0，使得花费最少。</p>
<p>　　　　2、 从0出发，到2，然后再从2出发，经过[1,3]这几个城市，然后回到0，使得花费最少。</p>
<p>　　　　3、 从0出发，到3，然后再从3出发，经过[1,2]这几个城市，然后回到0，使得花费最少。<br>  可以发现，三个小的解决方案的最优解，构成了大的解决方案，所以这个问题具有最优子结构，可以用动态规划来实现。</p>
<p><img src="https://i.loli.net/2019/09/23/qcUid3omRzaVG59.png" alt="1569036847226.png"></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>这个算法由于空间复杂度有o(n*2^n)，所以做一般的算法题要用到状态压缩，用0代表没有到达该城市，1代表去过该城市。例如：11011代表1-5个城市只有第三个城市没去过。上述的S集合就是通过状压保存。</p>
<p><img src="https://i.loli.net/2019/09/23/vxHhVn84XWAS1Pp.png" alt="1569036878291.png"></p>
<p>说了这么多，看一下怎么解决，主要分为4个步骤。</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>（1）选择G的任意一个顶点r作为根节点(出发/结束点)</p>
<p>（2）用Prim算法找出G的一棵以r为根的最小生成树T</p>
<p>（3）前序遍历访问树T，得到遍历顺序组成的顶点表L</p>
<p>（4）将r加到顶点表L的末尾，按L中顶点的次序组成哈密顿回路H</p>
<p>简单的解释一下其中的名词，有需要自己了解</p>
<h4 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h4><p>Prim算法如何进行计算？<br>①选定一个起点做为一个集合 a ，剩下的点为另一个集合 b</p>
<p>②将横跨两个集合且权重在其中最小的边加入最小生成树</p>
<p>③将刚刚加入最小生成树的边中不在集合 a 中的点加入集合 a，直到所有的点加入集合 a</p>
<h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><p>首先访问根节点，然后遍历左子树，最后遍历右子树。</p>
<p><img src="https://i.loli.net/2019/09/23/qZefMb7NgIaR1AY.gif" alt="GIF.gif"></p>
<h2 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>遗传算法（Genetic Algorithm, GA）是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。</p>
<h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><p><img src="https://i.loli.net/2019/09/23/H8VtSwGa3Ax42TJ.png" alt="1569037387267.png"></p>
<p>这里补充一下细节：</p>
<ol>
<li>交叉操作：随机挑取在染色体（路径）上的一个序号（2-n-1）交换两条染色体序号后面的（基因），这里需要进行基因冲突处理，即交换后要检查是否交换过来了已有的基因，如果是则和另一条的重复基因交换。</li>
<li>变异操作，对一条基因选出i，j（0&lt;i&lt;j&lt;=n）将其中的基因交换。</li>
</ol>
</me>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>TSP</tag>
        <tag>遗传算法</tag>
        <tag>动态规划</tag>
        <tag>Prim</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github博客域名配置</title>
    <url>/hexo-github%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
### hexo+github博客域名配置

<p>搞了半天，几乎全部坑都给我踩了一遍。记录一下步骤。</p>
<p>首先需要一个域名。</p>
<h4 id="买域名"><a href="#买域名" class="headerlink" title="买域名"></a>买域名</h4><p>买就完事了，上阿里云买个域名</p>
<h4 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h4><p><strong>也就是在阿里云网站上填写主机记录和记录类型与记录值</strong></p>
<p><img src="https://i.loli.net/2020/12/12/a6gcoHEbkG4Fj5C.png" alt="1.png"></p>
<h5 id="具体步骤：记录值的填写"><a href="#具体步骤：记录值的填写" class="headerlink" title="具体步骤：记录值的填写"></a>具体步骤：记录值的填写</h5><p>这里用到了A记录和CNAME记录</p>
<p>a记录的主机记录是       @</p>
<p>CNAME的主机记录是   www</p>
<p><strong>A记录值:</strong></p>
<p>在cmd中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping githubname.github.io</span><br></pre></td></tr></table></figure>

<p>这里的githubname是你的github名字。</p>
<p><img src="https://i.loli.net/2020/12/12/IcM1uxQSUaovC5p.png" alt="2.png"></p>
<p>把这个ip地址记录到a记录中</p>
<p><strong>CNAME记录值：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">githubname.github.io</span><br></pre></td></tr></table></figure>

<p>githubname是你的github名字。</p>
<h4 id="github上的设置"><a href="#github上的设置" class="headerlink" title="github上的设置"></a>github上的设置</h4><p>打开github上的hexo项目的setting，下拉可以看到GitHub Pages。接着</p>
<p><img src="https://i.loli.net/2020/12/12/ANT947R2yS5iGU1.png" alt="3.png"></p>
<h4 id="hexo的配置"><a href="#hexo的配置" class="headerlink" title="hexo的配置"></a>hexo的配置</h4><p>本地文件的hexo文件夹找到source文件夹</p>
<p>添加一个<strong>文件</strong>（没有后缀）名字叫CNAME。</p>
<p>里面填写你的域名</p>
<p><img src="https://i.loli.net/2020/12/12/sC2VK1hagybBtvH.png" alt="4.png"></p>
<p>接着cmd里cd到hexo文件夹，重新生成文件并上传。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g&amp;&amp;hexo d</span><br></pre></td></tr></table></figure>

<h4 id="任务完成"><a href="#任务完成" class="headerlink" title="任务完成"></a>任务完成</h4><p>浏览器地址栏输入域名即可访问博客。</p>
<p>github pages可以看到这样的信息。</p>
<p><img src="https://i.loli.net/2020/12/12/vfGZctIKhraxQCd.png" alt="5.png"></p>
<h3 id="科普知识"><a href="#科普知识" class="headerlink" title="科普知识"></a>科普知识</h3><h5 id="主机记录"><a href="#主机记录" class="headerlink" title="主机记录"></a>主机记录</h5><p>主机记录就是域名前缀，常见用法有:www:解析后的域名为<a href="http://www.aliyun.com。">www.aliyun.com。</a></p>
<p>@:直接解析主域名aliyun.com。<br><em>*:泛解析，匹配其他所有域名</em>.aliyun.com。<br>mail:将域名解析为mail.aliyun.com，通常用于解析邮箱服务器。</p>
<p>二级域名:如: abc.aliyun.com，填写abc。<br>手机网站:如: m.aliyun.com，填写m。<br>显性URL:不支持泛解析（泛解析:将所有子域名解析到同—地址)</p>
<p>解析线路：选择 默认 （默认为必选项，如未设置会导致部分用户无法访问 )。</p>
<p>记录值：记录值为 IP 地址，填写 IPv4 地址。</p>
<p>TTL：为缓存时间，数值越小，修改记录各地生效时间越快。</p>
<h5 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h5><p>记录类型包含：</p>
<p>A记录，CNAME记录，MX记录，AAAA记录，TXT记录，URL显性/隐性转发，NS记录，SRV记录，CAA记录，PTR记录</p>
<h6 id="A记录"><a href="#A记录" class="headerlink" title="A记录"></a>A记录</h6><p>使用场景<br>添加 A 记录可实现将域名指向 IP 地址。</p>
<h6 id="CNAME-记录"><a href="#CNAME-记录" class="headerlink" title="CNAME 记录"></a>CNAME 记录</h6><p>使用场景<br>当需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录，最常用到 CNAME 的场景包括做 CDN、企业邮箱、全局流量管理等。</p>
<h6 id="MX记录"><a href="#MX记录" class="headerlink" title="MX记录"></a>MX记录</h6><p>使用场景<br>设置邮箱时，让邮箱能收到邮件，就需要添加 MX 记录。MX全称为mail exchanger，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。例如，当有人发邮件给“<a href="mailto:vincen@example.com">vincen@example.com</a>”时，系统将对“example.com”进行DNS中的MX记录解析。如果MX记录存在，系统就根据MX记录的优先级，将邮件转发到与该MX相应的邮件服务器上。</p>
<p>主机记录：一般是指子域名的前缀，（要做<a href="mailto:xxx@dns-example.com">xxx@dns-example.com</a>的邮箱，所以主机记录输入“ @ ”；要做<a href="mailto:xxx@mail.dns-example.com">xxx@mail.dns-example.com</a>，如果主机记录填 mail）。</p>
<p>记录值：输入内容通过联系邮箱注册商提供。例如阿里云邮提供的需要配置的解析记录值是 mx1.qiye.aliyun.com；</p>
<p>MX优先级：输入内容通过联系邮箱注册商提供，MX 优先级的数值越低，优先级别就越高（如下图，邮件会先尝试发送到 MX 优先级为 5 的mx1.qiye.aliyun.com，如果尝试失败，才会发送到 MX 优先级为10 的mx2.qiye.aliyun.com）。</p>
<p>MX1<br>MX2</p>
<p>注意：以上仅是对MX记录的设置为例，完整的创建邮箱，还需要同时设置CNAME、TXT记录，具体需要配置的解析记录请联系您的邮箱厂商获取，如果您的邮箱提供是阿里云邮箱，您可以参阅 添加邮箱解析 的操作文档</p>
<h6 id="AAAA-记录"><a href="#AAAA-记录" class="headerlink" title="AAAA 记录"></a>AAAA 记录</h6><p>使用场景<br>当预期是实现访问者通过 IPv6 地址访问网站，可以使用 AAAA 记录实现。</p>
<h6 id="TXT-记录"><a href="#TXT-记录" class="headerlink" title="TXT 记录"></a>TXT 记录</h6><p>使用场景<br>如果希望对域名进行标识和说明，可以使用 TXT 记录， TXT 记录多用来做 SPF 记录（反垃圾邮件）。</p>
<p>主机记录：一般是指子域名的前缀（如需为子域名为 <a href="http://www.dns-example.com">www.dns-example.com</a> 添加 TXT 记录， 主机记录输入 www；如需为dns-example.com添加TXT记录，主机记录输入 @）</p>
<p>TXT记录</p>
<h6 id="URL显性-隐性转发"><a href="#URL显性-隐性转发" class="headerlink" title="URL显性/隐性转发"></a>URL显性/隐性转发</h6><p>使用场景<br>将一个域名指向另外一个已经存在的站点时，需要添加 URL 记录。</p>
<p>使用前提<br>添加 URL 转发记录时，转发前的域名需完成备案。</p>
<p>设置方法<br>示例：以 <a href="http://dns-example.com">http://dns-example.com</a> 跳转到 <a href="http://www.aliyun.com:80/">http://www.aliyun.com:80/</a> 为例。</p>
<p>1 . URL隐性转发</p>
<p>用的是iframe框架技术，非重定向技术；</p>
<p>隐性URL</p>
<p>实现效果</p>
<p>为浏览器地址栏输入<a href="http://dns-example.com">http://dns-example.com</a> 回车，打开网站内容是目标地址<a href="http://www.aliyun.com:80/">http://www.aliyun.com:80/</a> 的网站内容，但地址栏显示当前地<a href="http://dns-example.com">http://dns-example.com</a></p>
<p>2 . URL显性转发</p>
<p>支持URL转发301永久重定向、302暂时性定向</p>
<p>URL显性转发</p>
<p>实现效果</p>
<p>为浏览器地址栏输入<a href="http://dnswork.top">http://dnswork.top</a> 回车，打开网站内容是目标地址<a href="http://www.aliyun.com:80/">http://www.aliyun.com:80/</a> 的网站内容，且地址栏显示目标地址<a href="http://www.aliyun.com:80/">http://www.aliyun.com:80/</a></p>
<p>使用规则<br>添加 URL 转发记录时，转发前的域名都需完成备案且备案接入商为阿里云。</p>
<p>URL转发时记录值不能为IP地址<br>URL转发不支持泛解析设置。<br>URL转发的目标域名不支持中文域名。<br>URL转发前域名支持HTTP，不支持HTTPS，转发后的目标地址支持HTTP、HTTPS。<br>URL转发属于特殊商品，云解析不提供攻击防护服务，如遇攻击黑洞时无法使用URL转发，请将需要转发的主机记录配置为A或CNAME记录。</p>
<h6 id="NS-记录"><a href="#NS-记录" class="headerlink" title="NS 记录"></a>NS 记录</h6><p>使用场景<br>如果需要把子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。</p>
<p>设置方法<br>示例：域名 dns-example.com 使用阿里云解析，将子域名<a href="http://www.dns-example.com">www.dns-example.com</a> 的解析管理权从阿里云解析授权给腾讯云解析做管理。</p>
<p>主机记录：一般是指子域名的前缀（如需将子域名为<a href="http://www.dns-example.com">www.dns-example.com</a> 的解析授权给腾讯云解析的DNS服务器进行解析管理，只需要在主机记录处填写 www 即可）。</p>
<p>记录值：记录值为要授权的 DNS 服务器域名，例如腾讯云解析的DNS服务器域名f1g1ns1.dnspod.net。</p>
<h6 id="SRV记录"><a href="#SRV记录" class="headerlink" title="SRV记录"></a>SRV记录</h6><p>使用场景<br>SRV 记录用来标识某台服务器使用了某个服务，常见于微软系统的目录管理。</p>
<p>主机记录： 格式为 服务的名字.协议的类型。</p>
<p>例如：_sip._tcp</p>
<p>解析线路：默认 为必选项，未设置默认线路会导致部分用户无法解析<br>记录值：格式为 优先级 权重 端口 目标地址 ，每项中间需以空格分隔。</p>
<p>例如：0 5 5060 sipserver.example.com</p>
<h6 id="CAA记录"><a href="#CAA记录" class="headerlink" title="CAA记录"></a>CAA记录</h6><p>使用场景<br>CAA(Certificate Authority Authorization)，即证书颁发机构授权。是一项新的可以添加到DNS记录中的额外字段,通过DNS机制创建CAA资源记录，可以限定域名颁发的证书和CA（证书颁发机构）之间的联系。未经授权的第三方尝试通过其他CA注册获取用于该域名的SSL/TLS证书将被拒绝。</p>
<p>域名设置 CAA 记录，使网站所有者，可授权指定CA机构为自己的域名颁发证书，以防止HTTPS证书错误签发，从而提高网站安全性。</p>
<p>CAA记录的记录格式<br>CAA记录的格式为：[flag] [tag] [value]，是由一个标志字节的[flag]和一个被称为属性的[tag]-[value]（标签-值）对组成。您可以将多个CAA字段添加到域名的DNS记录中。</p>
<p>放大查看<br>字段    说明<br>flag    无符号整数（目前仅支持0和128），用于标志认证机构。通常情况下填0，表示如果颁发证书机构无法识别本条信息，就忽略。<br>tag    支持 issue、issuewild 和 iodef。<br>issue：CA授权单个证书颁发机构发布的 任何类型 域名证书。<br>issuewild：CA授权单个证书颁发机构发布主机名的 通配符 证书。<br>iodef：CA可以将违规的颁发记录URL发送给某个电子邮箱。<br>value    CA的域名或用于违规通知的电子邮箱。</p>
<p>设置方法<br>添加如下两条解析记录。</p>
<p>放大查看<br>主机记录    记录值<br>@    0 issue “symantec.com”<br>@    0 iodef “mailto:<a href="mailto:admin@dns-example.com">admin@dns-example.com</a>”<br>CAA 1<br>CAA2</p>
<h6 id="PTR记录"><a href="#PTR记录" class="headerlink" title="PTR记录"></a>PTR记录</h6><p>反向解析则是指将IP地址映射到域名上，需要您与IDC机房或主机服务商联系实现。</p>
]]></content>
  </entry>
  <entry>
    <title>jsp学习笔记</title>
    <url>/jsp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
#### Jsp学习笔记

<h5 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h5><p>定义：一个public修饰的java类，提供无参构造方法，并且类的属性都为private，属性都提供get/set方法。</p>
<p>javaBean可以分为两种：</p>
<p>（1）封装数据的类。相当于数据库的表</p>
<p>（2）封装逻辑的类。用于操作封装数据的类</p>
<p>用于简化代码。提高代码复用率。</p>
<h5 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h5><p>M:model        模型</p>
<p>V:view            视图</p>
<p>C:controller 控制器</p>
<table>
<thead>
<tr>
<th>M(model)</th>
<th>V(view)</th>
<th>C(controller)</th>
</tr>
</thead>
<tbody><tr>
<td>模型</td>
<td>视图</td>
<td>控制器</td>
</tr>
<tr>
<td>模型表示企业数据和业务规则</td>
<td>视图是用户看到并与之交互的界面</td>
<td>控制器接受用户的输入并调用模型和视图去完成用户的需求</td>
</tr>
</tbody></table>
<p>控制器调控模型和视图之间。不同的视图请求会由控制器选择不同的模型完成。</p>
<p>jsp+javabean+serlvet就是典型的MVC模型。</p>
<h5 id="servlvet类"><a href="#servlvet类" class="headerlink" title="servlvet类"></a>servlvet类</h5><p>继承javax.servlet.http.HttpServlet的类，注意重写doGet和doPost方法</p>
<h6 id="serlet的执行流程"><a href="#serlet的执行流程" class="headerlink" title="serlet的执行流程"></a>serlet的执行流程</h6><pre class="mermaid">graph LR
    加载 --> 初始化
    初始化--> 服务
    服务 --> 销毁
    销毁 --> 卸载
subgraph   
    服务-.-服务是最关键的,包含了doGet和doPost方法.
end</pre>

<p>通过a href=”servlet的类名”访问.</p>
<p>在serlert2.5中通过serlvet-mapping通过serlvet映射到servlet的地址</p>
<p>3.0以上的版本通过@WebServlet(“/地址”)来指定servlet类</p>
<p>通过localhost:8080/项目名/地址可以访问到该servlet</p>
<h6 id="servlet的继承关系"><a href="#servlet的继承关系" class="headerlink" title="servlet的继承关系"></a>servlet的继承关系</h6><pre class="mermaid">graph TB
    interface/servlet-->GenericServlet
    GenericServlet-->HttpServlet
    interface/ServletConfig-->GenericServlet
    HttpServlet-->servlet类</pre>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br></pre></td></tr></table></figure>

<p>service方法在service中，在GenericServlet抽象继承，HttpServlet中参数类型强转为</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world.html</url>
    <content><![CDATA[<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">

<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment<img src="/QQ%E6%88%AA%E5%9B%BE20190815084633.png" alt="QQ截图20190815084633"></a></p>
]]></content>
  </entry>
  <entry>
    <title>test_pic</title>
    <url>/test-pic.html</url>
    <content><![CDATA[<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">

<p>微博的图床：<a href="https://pic.lizenghai.com/#">https://pic.lizenghai.com/#</a><br>每日最多上传100张。还可能会失败？<br><img src="http://wx3.sinaimg.cn/large/9cd3e769gy1g6kg8jv0uwj20gi0jyh1c.jpg" alt="aaa"></p>
<p>github图：<br>可能dns污染上不去。<br><img src="/test-pic%5Caaa.jpg" alt="testgithub图"></p>
<p>sm.ms图床：官网地址：<a href="https://sm.ms">https://sm.ms</a><br>特点：永久存储免注册，图片链接支持https，可以删除上传的图片，提供多种图片链接格式<br>图片上传限制：每个图片最大5M，每次最多上传10张<br><img src="https://i.loli.net/2019/09/01/himBgnrRaPVld1T.png" alt="20190815084633.png"></p>
<p>聚合图床：官网地址： <a href="https://www.superbed.cn/">https://www.superbed.cn/</a><br>特点：将图片分发到多处备份，借助其本身的CDN加速功能，节省服务器流量，不用担心图片被删除。<br><img src="https://ae01.alicdn.com/kf/H95cba61bf4a14818b70ccb89894b900ci.png" alt="aaa"></p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>rj感想</title>
    <url>/rj%E6%84%9F%E6%83%B3.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9779ed4a17a7d7d2d2be6a0af56c36f4454490fa70ec93b1dd9f40e0dce37a55">4630436162ade97ba2718b7d0c4b3b63ade7dbb51df32b85ecb15344de6ba4bf5fcc1649ea060c3569061ad7d301c9155273a79b9e02a741188f5dad2581e53ba86085ff1f82ffda42ba27e179bc83f9a7ea0f4e28eb1e9d9f293c2948b1638ce1a6d06a7896928789718c879704d458327680a957f585169d7d6963e8501fd9f5f93fe6d58666a31c33dc508db16fe784540324c19158aa52d5b951977969ae48762813264c20b1388a6a9e725c05662b603da211819d1fe4a8ea4580f8d655cfb4249592809a876f08a2923c328cf0c7a5d53d912226bac2ac71cefb34f7c4fc8d69e613679796c4d0404a36d9a325d3a190b44315aeeca2c80d9b14bfe206f345efc9b068abb75df2a749955fc5246696443bf3778160980e1d661421f2e777ffe8d5ecaf788318eae019463a2b743acd3e27c4bb2f176a39610e61910956e7191050dce0d561ca9edcad9b30868bd82f7aa506e55077b6965252d650768db86a656b60f8fec084fe308ce49fe48408e6e26a0740e51a5502d036f5579be7a28c323646b2f7cd3aa04a30fd711b7dfa1581937ee7fa027d98ed3039ca2c08c23ea2c9fce139db1755b68d7ec96a65a89322d990fa5ecdaed12e8b9ef8a27ede038a6fbbce494ad5579d218a7a3edcf53c196bf0b0dacc3f0aa611d54c88e67299b01cc391d49462992ae8d473653341b32d559537a241c591aa81f66733384eae9ad112b4618f4e058f8bcace9034ad468581bda18c1f5695baad4c8e10862f671aad1b748ce3edb3a3fd94d45363065f3cc051d4399c25efe4a64f4a937bd7ee86998fc6fe6d9bfa2d5bc3ff1308c5cdf5737336ffc937130d6c597813bd38839dab32531dde39d1c240d6d041f61c29cba19d3a4faed8b14e916287a9121b091e51c1539f7a3d0e50cd49cd67b4f5b0307e4c7f32446d22a9e05713ff54a75a881a8dd2cc4b11f6bc45c80dfad7f27070669609ae70477925087db8eda6485a8cfb5065db0c8e0cffb771917df0d39df78eb15b1f4c6d31aff7c0a24ed632d59e582a5088762fb840237cc2353976e5b0453f46cbd2a37f99ee7fff383cbea24f9147b645a5f9022538c58d74367ca84a9d3fc633cb68f8ccba6872aa5c0e93a84f82c0c65f93776ef74c107b1dbbdc054f549dc8021b43ec151dffe0f0abec794e8d91311ea29b9b1b3781d067053e2924ed1cab4a5c3ed597b5f4eaf14ade2666caed11e0563125d0712b4a5b0f8481919ce14349e1e9a5b70067116e8d1261999d09bb3be5be10a66fd2b9ce6be13f30f51fad921e66c01adfdd8b885c1aaa14f33c63c245bb2755b76b24b12296a416f2a615c1872a7f689cdd241497e808d814c23c51b566914485b0199c607f672ea738cd311c77788b86e57f8fcdb32212aea2e257d021b7f00b9f5664c44134a57c6652b74bf4d45360c8f36fa22734006ea6dddd79f42eec14f80815b7f84b08ecef9bb8b9e51edd48113ac8325dbc65eb03a5784af5e27ea75e0f181b8154e60d78fb34baa42ea0f44d7edf0e24107b001795e5b2bbedd7dc3f87e187bb530906307c402ed98f6560f3e39edd260f26e9434dbc804c8d093ac67875ad77d460a0ca476cf3f25923228935263466d9d88171483371b4c63684ac41f5f6fb86d497a4a55a44ddc7288105fbdbda1b8b39908a44d9149067131eaf8b33b765bd87423a521aa2b68d1009d2270181f8d2f260ed2b91649b51b0a7a1a3a94e47fc67ba93f98a41031e858e1df64d8879332d490d18ede922993b8c3fa65af000cbb147633d6d0dfb3973d1945b84d3ec34d8be0d79bf8e3f53fcd8e8d9ac1cca6259766f12ece4d87096ec38be6598a6df9d4996094bf36249e1ab6c662e7625f98955069f0d298fa2e57f31f7f744d4767ca18a801987259510e5fcf6212d3dd1fe901532861212bb37aa7695a0a10f6717791837077f0462c39ce5ec8dc5dab4e774d2d408d97c21c817e1122dd2d0c58d9975badc8f6c34bc1f9e61b46e308f3626beabecabb8fedbee3d47909b9708d1b76c1e4c7b636d5c7eb33d5e8420197423d45d4ef232b690fa0245da412ed86ab563c447e6c9c996d1be93c23f0cae4fbc4c15c511d7118dffe07330926f2733b35a7b10361585fbc003a87eb840007ac627f1bd42f4596199802347cbbeccb37a0083fa856a2a299b1b9f42b8713f278df03b24e4e7084f139a33730b9067c63f08d980578a5e80bc6a77ba06ffd6110eb8bc9fbdbcf0c4ee49590fde8806c1c0b2d39372e8883f840c6f6fe692231f5f1df6842e7bfc1d62de9eacf970e700997223393d1d30e1c8d4a558f8b2300c87878357e070e35928b39b562602c98906f68ba92f374e6dda57c79540bca6f1156cf692024827f8fb429ec2d50d0ba3232410db3e33c9a0edbfb86dd9df7a1127ce87c5a0d35dd64576327aced26ccbcaaf5285392202ca3bab5eb32aef74e0d73bceca3902115e6130f0205edff80e5221a24ed0d538086de81bcffe3a58f0d85b16bcaf61e27c706ef79615cd7d4fafd03b09295196c55c62883ce46cbc77ade911b6a34af813998c18ed5871ca97272b37d7f4bfe9b6794ef77475368d3c303cbf6ec90b7e47e7959e6743499ee82cb06d836e8c9d7c46ddee5ef031e658cbeaf97fe679a10695b60f55cc3f6df96200fc65fed5edf378e7ea21576419f3da92482103bf0ad4c21952c60b1c4b699b43b112ce64404fb17d4d0bc0854f288db5e15882dabc487806ed591f604842a6fcc87fa4a1568e7facf6abff803e3cd2c5bbef961e2623929a6b3817eacf161e5a5f598603d7b15d8f068e6231d0e470b2f4b6ce1e94f28af5d4f9ac75f2d6a1dea2514586dfe682ef3e01a8118f0b7b44bd81e61d02b4d69399dd447b8858f07f737a2f2b54a1baa682a9546f8988c6d5ddb856f180f3c5cf4b8fe5a9d7b5691ad70f40cf631bf7911f477ad33e15c2869052abd84e4e419344d380e0c4423743aeff562587042d0137e96cb87775611ce09e648e25e3bc40d43fa135ca8df9b96347a040366a228102b300ed73e16d6c8b52130e0cee192a03f0ec34fad4de93daae6329fc424a023be8d964209e8fd0e1cf61f058f3c07a50493d65b51b4b63538ba8dd1e7fa3791af639816e7e24a19570cbd36fa94489dac223f8717796935b1f755dd54de5ae11898b652e6f91f4da17aaae720158b1659063482cdea0350e7705bc78055855015cd164292ee94d71aed125a599ec446103a122feae23d53d6f8e03a51314313de9a6791aad7562227537281f2445dd552919007731c8f7aa133f8f57d0bdfd5211e73e3956948be86cfd16df8709c75ea6c650746153b01343c76b63db49e379f95c10a15a89a858f844863a3c2e95f48fb2abd3afbf8b1633754323fbc2112406c20f8fcb589ec495d6e21a3f4b209ee2afc58bc8b3af78e21a91a51ddbc53b14e8308bbcd65b2ea9a5fe89e166b41d323a180b4514e8109f42cf9425d08df488869ebcf836f5ed5d009077ab908a5778defc82c42d721ced00ff1b8c205446bac8bb7937f267d0991b8e6dfa116ab5157a9d4a3790d0858fa078fc8dce278250de13c259c2e53c71f0d8eb87a56f75f596a55471228b5262d7def1b631c137b4f0c2a42b5890bdb4a227eb61faba018aaaad3d06300008a6beb014581b2dcf26da4a47ab11c873aceb3c9738c1cd8facda9a96a305b8bb61c720e314dbfa8a31834f4e84d5651b685ab6f03bb57cc7f15adf9b6d1e3c13e251a9a065c8e19868b9179f1442a519d9ae6b13513b48170c39a8151c67ef4aba62a5695742d0ccc07e1377243515db4ce46dab82718ec6a3892b7ad2083651147ed01658c3017243d0b8d269dc543a405695a746d29c7afc5dbead9543ad266bf16ec36ab477c78c3222ffd966f2c7df89823621f948fb9063dbbee15b7678d2966c63cdae11711f63a8b5be2e4b08ffa04c6fa67125bcff3ebf450ed40e409bd127fc169a36536f07f6327fbc46c9081deff596aab34b3e309522849de7a1ee32402687556f8a34138bc2955dfe62390abc514e5a30ce5a154b28d5cc471a9e4720c55fcec6c706af7ed93854f8f4b4324f95ec3501d1ea10c3ef0b7f8b66a9dc7bd11dd980505709bb5878d2a4dd73fb8dfdea27b3771dd0ad0687d40a9bf19a51ba8db3fed7e9db4b69965ac78f7a64d2a4f570e78ec2f21baea719e4319459f64f00d0b3799bbeb5bccd6def65a5c60b93ec182a0ddb62f23b49b26a5ce7256c0a19d3c940f87d68f007aed3c634622e5cefcc634718c942c7935daa0059b0b2ff759372aa74c5a77f7c825da4f119b4de706c748714e90d3e31ae2fadb865ae0a5a1b822f57cab7acad663ef2d9dcb1e02da8d73b8bf1fcd46b65d2d34705391499bd7195a1bdad3f0fa393414b2eb7aeca03b612befc9755cc1950ee9c14c3f5315a9b64c25f69324822bf308c2b8a80a68dbe430f41d695d279c97b3ade23f0a8e04dd6a8ca68f752872213bb2596cd00f818c79da8026039727854ba3c58561608e3c6ab5762eaa917f8130f02fa01227f7db2bd7fa3911d17b7178bcb361b97a8934a3254f1d780f00a1d5a9dd249f8deb6e929b7e5d1980ead97303e340448fc24bd642b13738eee2fd8a1fa0e860cd1408c7db843e90bec1664442d9cd52db111c9f3a670fb17d0cec549a4be6cfc1c3e082a307e15d41f6a7258e5a0cfe8537a07f452d9049f550dcdcb1a390d5016c2453e15483ce433723cf5954b81e6266bbf1403fe5a1ad72b48328cf8087288d0b0464b80260927cb8be279d16b6c64d11ca627144ca8459cca7b5bef5f706ba052bc9baf68ace96b8a044c3b1fc97ae96eeb2b469df1590f2e0382accbb8fb398bd96e3b441d90227b06773e750a79ce98ac2531e7227ddb78a940a580d42b94dfd8f46e19419f9cd38bf6a5e92497ab36cb959bff2454a946a2e9604224dea5e1c378816c2ddb89eb756fe69aeb1edc51c6a6d20918eac8926533201b45809c451a549ddb865b29ea7dd54380c5218ef80564866e7c766ca72c0b0e8877988f071ee5a5ed685ad34e8d201266cd7a0ff414cdc9feb8d2caaea3435002521c85016866617a3a19005f6f7a3627ebf32caa9ad35007d0e5ca21cab55c242730314405ab2e17438f99b6d64b2b0676e6294a4ee66f7286e954e2a72de3e57c6f5029d10ea20a90147d886e01ff440a2ae253533a0844ddae766fc17912a82bfce6a4a38d2cc8623ea921ac2fbcc7192b45745b805606dd42d22e3998d21cfd10d6eeac05cc776bf8e5b2217edc7594e44a83b4a0b15347b8e165fbf4d1f0acf572061817b8117844020b525c2d7a0edaf1e7159efa5823d361f48a6cd46c61489ba09448443f467ba3b508b2fc63e8aa68693806033cdc4c81d6f1c82d16d59ee725a5aeed14f1725144c22dc3e37601e80db68bebccca98aaaa3ff322fd1eab5030141cd278e401ff637702fd51dea1795e701c51c092f5b37b86079a09e1dd48929619a21fdf047c4c0e865503e6b07486fa00be25d5efac6ed8346340394672c835d016433147059b0ea790b08102bd98493bf2727134652d4e2855e5dfe486997bf4503fe63398118a9bf86c8d777b8a101bd859ee51aeba7f24c0a4cf888666c50405f23412a51e5c7d0f55dbd9bb9d12ff65e8f5f7de67c93f2356274551c56c01a615a3b9934a0e8c77b9398a9040e28c42811c73d605966d79c5291febe6087fe43408bbda574318a8477c457184c6dcb30dfc13297f1e478fc403dd56910a02c07b96fe9a4e576c4cbf65c09144a272563933aa8990ac152d54940e6ce38ed02c1b658cefaa6e1caae6d527b0bffe8e8498d64a8662186a163477c7efb7e7af82e32043ffa13c14e1eceeae6e7a98e1292034a746b458af68e551d2922e09d221242092fb156fb6d63c0124dbf20204132879cd1d0ef62e6e92b0eef29357e280645f6488a94cd5aa4033ab2ed1708341b1313400298cd7bfd40248fc3cfe6eecfe23f73cc2700e43560cb4c4366a680fad1c700780168f0efd99dc8b57481084bb35cb3aa73dfe2cc4ebbaf6ad90d1ed8d4fcfbdf1120d86404fcbec3277eddff8b7cc07c26dfafbbc9f1aa8028443caa982aa2d2a28f698209edd80a825abf3a6a548945fc91272501fbae699d48377048e72e3b5f64731dd4a05170d23280a7312cfaf4fcee6ed43863267892cf069cfe92145421ad8c66a3ec25a10bbd061ba9b59c91c7c03c87fb972b9f63bb4c54fe6871bf7803717ede8ea9d97f85b8d82e3ce32fcedf841b299bb810c32ec476fcee1b5332681906df3c778160181f8d4aa5675688254cee703d49bc28e2a6421d921cb9060deec5be6d3d3430e6804ab94e494353f5492a52fd43555288b14ccbe48e81a0bf9fc7aece66349c7dfecae9512abc7d34368096ae270d068d202d381b3891ffeb336ba006fd3b92f536981e5720a0500389726dc5fff4b88e86eba292d8f9fc977c78e2e6708920c7b3aefbfa387ff4d4cd9c96bc797f19a7ed5c265de19d72ee6a199baf4b75a470e219a218d18e4ef2d7d20b621203eebaa016577ca6229cc0f007ebc8fb23b9129c801376596887418197393f3b44f3be030ead49c1ae6a865099c96d82359644af08a79d62237aaeb0ac37f99f09d14a0c9c1d3642472a956d0f5d17c98725ccba20e7877a9935e9fd4cb670f597c8c71e494c766c198c8522d1bdf01e36acb71bb7baf905df814920b6c6cbe438391ef0dae3d517302f5af15c49522bb3f1223af22bcf19f1644036e6e9b1dd70d9ed4d096177a220215998a98c57d05ed84db57a9f43a2c328a94c5ef8ed97c8a3adf2d303eca24f7009c811d0b9d2363824f207e163c0a86a5a0eb00d055023bc1fd5aae476d48c5615e1d6d60fc7f10483583c2c66ba36de4197f9998a0d4dc84b588e7004f5f083b96d71adf280fde314b465368dec090d26438aae6925fd46a7cac270b072e16ad4457e926e654e162e2e85a76a93ed0a588fe0e3140e4cf8d2ff222e784097fc4f1432cf13379ac661455965de35e39be9a80a5433c24ab5ad05723b739ae096ad6abe228690daf27943d1786b3b52bc3534890ba8f9f5620faaf9c7ffb353de8328d8e89d9363ebfff3150748a497b5cc846ff9d2a1465f5a1754de6ceed33f78a7b9bba62010163836cc8ef3c96122e2576bc0e9f91c770d09b6a8cc32da41ba86e243baf64f484ef4baa9fb680c520d9d823ed50139bd3d39cdbe2bdad9770f7f0c987fd743d423d5c2fefb2c60a3c2548eac92ad5b65f565fca7dd60b9ab0e93f71cd92ced2c4c26e39010f31a69904a0ece9c7d36cb6c879dd6157efab5502707ad92298b0e76ac3349a930934d3b1dec67d5caa422659afd818e26f1a3c3627eb22d08e6e92b4a858e9aa203260c212654a8efe71c9fb5409d8f42f51bd9bfe6e4017536dc46b7ac0841b5b280e3bbd13be8b9b8311feb299e85df298582598e2af07e2b99d4c4e5805a1f6f726083b630cbd7a461cf36b86d093c2f4bcd8099b394a3c4cecd91dbf30cf7434da6d60b726ac41e6d14e8be170b05ce6c6f27fd9d5f9faa69cddc8a6dc9dc206d1d8055ceba9fb4af17eda1678c105cf915a50d95092e529b6e7c64107d1fa37dff150250c2546bfb8d35d44f50497ea2cf0119539689fb337314b04b4ed5b3283801f9f9addb98116dd9dd3e44ab88c7286ce5103c0f1b2f3a8ab236daf3197edace6db884ce1c0f6f08bc26adce1a609c606e477d894a1a0a8ed229c6998d7f9c55adbcb56e9664066a22b8ea4383bd2db77a242900115bed3d6012e00a621694081105c284f1e84219851e23ae609b175afede85ecbb5119264be656637d6df4b2e11918805349fcc5f3ad57c0fab1309bcf1d6d38681ffebcff81a833aac3f2f251b12e76d94bc7b89cfdc9de12f0e6cba6e2fa4427c1c646b7f93da4a5ecd3e5a92ea9f3e6c794080db1124c767e65be45d5d847c072a3ca3106f309b0f7eed0625a122be984aded9c063568171754485932f6c39333de710277706194f03095b12ec7acbd6cba1bc662a47117d4dee76bf27d7d08becc14f0cc928960a5b609bcc0eaee220c132d5c943a2a04f0ce6356354b159b61e456a9747a4b5b0edd7b80a5cc141700272a8fe9c63fc5da57c6a5850b1ef69f24aec0565cc3a1ccee699f299839c0d0cd8951972e68ad22cfcc3dd7487c257fb1bbc61feb2b7bea3bf9d43c091bfa1c72622a03f7189406c4f35fc6ceb9e5ee9e8050e15f29c17954f9fa0637f163cb04922e4fb8c992b8bd603aead3c368cba534a514419e7168f0e7bc04e3cf2b0d2c565541b695977aabf05e7e858d85bed003cc1397811735d5d058f96b2d854107e21341fad9d2fcb9fc13ad683774d3aedbd93e4abc26f31b9731b66a7508f9764cdbe2e91912870ff73db0e074effd3206a4825ee337c35af1593b79e4011f8565226a172f29e23ae43be50529050f37b6d3a01838661c699baf339c6a15aa79d2ef47f8cbe1a064ffe509a6e6b04d38fb8b077b1df53f18dcfe3afb6737b8319f518ef0b8c3fec1aafeaac3cbee5f702fe5e5bb23971b60c5142252070a99e6eee61457bfd1694e04528cb616c5ce5f292dc58314142ae7b9cd97cd163f0b47306ec3c61cedb17ec437b09536a53b7b347bfa6ede0c8caf40e56f26b5efe791ab45ce145f34154bacef69601379065ff9fcf9df84fbf3b11a98b60899aff3b4f003e253b3b4318eb1a06dcdb59112e9b7cabfaf196a544d4342350609efbbb15d4860979634feb84053c7fb67f71709f3d733b598479ae3d61cefe7d35378237ba2a35d08f68fb40528b4103a16150edcd1e4ddf124ff54af768d58cef83815e15b853d86a6f690c0818f6417691c1ff1c07ed1c6a4da2ea07567c1e59b2df7f95fc5fc7ff372c1004bf02e266d64a6bd701371c95e9c94dcafb0055b031ed0787116000926cd9171ecddfdd137ae40690ecccb5782af3531015026034d0d669ce67ca2ef1dc278721b982d21a78f64050d9ba6cedc2cdcca5e306e2c6e14175894bd071093c353acecda166db3056d3efd83029fa74fefb5ba660cb989ab659ee249553f4ba485f6794541fbe99e147ff45508c58e6d2d7f7708406d09235994d129cddb8746f13138b1b3f3004c6f9ec2c0cb556137548eb73e53c00f76090c9a19f9a11c4329c12bf1c2acc03e4aef790bc74326414f21c10f8058c51661f64020e620c3faa8f5101121bc5d897b594bbaedbad84720753d251ce2a840b63368c37d9405b7d4ca4488ec9429eea91de84e399b2b11174c166abc1a8a0c02bce3188c088b16bacb6bde940aac4cb3239bc2ce12ada097d67faba802abd00cac58c1709f715e5287c97a579094436ab27f51b7383ef76a61206bcd658d180529eccdfe5baa9d17c9a0a64eee82e3acffd537aac5fa9d768ec36d2637bfdc6b4cc4e09123bf623d5af5afd9329459376fce04d0ee36b3f29e07c62144e54865856b1c43569f738f11d66554ef86bed1944b4127a9da675434505f95e47bcd4b9b98f8d1f2049e1807631d68027fb685dd1b7628e4e008ea91e3f70c325ec62d7c9cb3adec852d201a44d550127ffa8acf79ac16c4531b677c665cf223d1038b7b8b1af211c63adccb3da63da4f93428d744505c5f123a2025f274623fcb1609e5b5411731f11491b9beee9d39abab72c85f168ee220a339b381c1f6159904d26615638f9c48c9e02c0ff8167c4cd0adf7c7f172a0231067a7080f9a8107b510829ce8c0fd49311a26ebbb486085dcadb55f9af2020dc04ae9f3bb634caf9186e5ab9034444c2828f491a28165a63e7abfef06e2c58c8a2afc960139e8333fc34e494522456c67964494667bffbf79d78168eb53898f348a85132f9ecf89aaed0a0b147d31cc1315f33212c0304d12185366ef9619b0f74fd18aff421a760b05c8ceb2d852ee42a8b061d9fbc5855161dd5af3af5e8a416314b04aa5ecce7d11699b97b2dd1ca9df212304daac4c100394c10212e3a3ced5e0a4e3a13f28a925dbc16b01b4c3951d951a93bd2ee03edd7256f31ee792edf94bdc364f75fa559e19202eaf940091d60f984ac3d4c65c2f33cdf92ba304055bd28ff145275a9ac0e124e9b3ca9d1e0b46b9323aa6a0da1f6662c7e71c6bea228fecec3386cf0a052de191d817ac30195097b651c7450f8734d6d39f7b5b9a4c1412c78688478ef6054268b7a1f91b46cc8f60aca2e25da79b7769fb39c9204844250b16b072c7dffa38f6012a50441ea7eeea08e09bff1a56e59044086407107e4fe4629326ca5ea75b5f3987a5dc66e6a7422387550009f423bdc5c1916f84e7eac9914ff4c3f4cb68e3e472fd741a583f0e531c2c3ad97342dbc94920d11b9bc9193c5f6306a33e0a8743940145c779801166009a8397ebe0e2da3c21c30a661af62b585869459e6f2034bf35823745bdfebbd5c6f8eaae9df08ed0895462f1f96688def11382f1dfeabcd3cd0ead8562eedbe9c78708df8cb7ab88f14eaeef5d0660511acc14ce66c9e312f51cddf8582c617493387a013c4d930708cfd9cb8c1ef5e9a0bc7829b0cf3454511c3ddd54d98a0f93ee2b86b858ded39fcfac260fb77d4bdefe12f267f00ed1c16abb76ccc95c49c3a49783ab8d765e1f442489b219cfb98dda0bea14c7df890606d0f75c50b96308b027045a63ba93be878cc21513b8356d991ae6ac8dc4f2b00659e06d0385d51c99c9ad08992d30ae988077d6380ba08fd9aa1bd106d2e609977cdf7e23296d169c2ed11e4f565cbd9e33f631ec7441f79a6eb2ffd85605a50c07971b95ac2043f5b6f8c5c776a8eca771e18ff0bcc9378a86288305a4ad47de8f74ec890d02ea09aea7a70e659fd4fcea8de6fc8ae5a41f770aaa5d8beaa6736e842aebad17b270c1f14fcf8e1c7c0e164ba4c9c8b7606ff26e9add72dbcc0ef915a155e0afeb1d9311e6fbb3a1fdb9a14872cf31218b6f6056261c62cce2382cd07430a86e195dc189fefb5ca20a7fe76fb0d37585feaff74cf84344cb6ea3b944b1c23e2e1d68e5cb07ebfa6833772b81cb74ef2f6318bf1c5a03157d69b2733279f7aceaf1957a3b3e9b62da1fd3bd7cd4980c4223e759f51121ebc5d6c2d6c692a895b2cedd7383b25d55c5b43881941e3433d26195a276ce76a6c63e76b8867c325b63d3bf93875a7fa8c39a747968ce7cfe148bf5a21f759f99b4f4c9a2ce34f78613f8f66501e5712f7ae90e6c87e3fddccd9c10c284ff7c4e6761abc3bd273ddc830d54f7e0e6fb281336cd1b4a43a8a436731c6ddb0fae11d78ebd9a5a8674b047a2a67123ec4efe97e403ad0024c493af8075c5300c9ebce7526c35da00c9ca073f8f7fb07526fbabb7ebc2cd8e6ae6a18310c14330e39ebb7d20e4823250348522f90d5b76dfbcd5dd899e5ee1adf00799e4fbc018b356ad521b2dd8aaaf056466bb451d9f6d8defe270538bc79014da5a4980ca4881a7fa13c0913b7ed938e11b73897dd66ba3ec20c3c362ec17622e40bcf0d9905ecc3b3c4b7fdf7e8285c572273ef5229f53cb748b3d4b8799a3a9997ef448c006ac724de07e8101c357d9432c0d591d58e09ab27e56bf7729e3bdb8b903a65823938e427e673fafd8370420c75d93031585b0ab748559a5f998692b13921636b48127f7531bf8b597ef96dc0c4bebadb7e9799f94cebfc3aecaa95f2445654e9edc6675e4f50b90430936b289d94bdf1f826c1d196d0ddca0dcaed7b87e02b160f43c43a113e24d22a19142d3fa9d5aefcc94c9484dadb30071fbd22e79428d4390792613931c3aed55ad753322bde147d06334247fcb9ea5323b62d2ed7fd8789e0f86a209acc3632aa0dc2dc2d5b0082c63f7277aecd3e7e66b3e19ab671e041edd02d2bca989a28c5a770e22a89062a794cfd8066619eeb56b3ef86e6734cb9a94a69c70408ecf26a24dd7c6aaa6d71eb73d6640e85b8510b2e104827a545e08ddcb0325f5cc572421c301411e1dd586a1132d1eeba04221fe29815c6726dc22c6a1c3e00fd9589a01879ba1e59366807709557bbf4bedf381edab9f241dff898c9f6730fe303499809283d6a3e89b2b82944fa67cb992bdfd74032c58a9a13810dedbb60f7959bb99744c98129005752b18530b77ee102c6ae3bf01b6fa77f3c673f27a483d5b667681070821efdbc64cfd61e0efae1d59a0f4a50756bee32325d9b80284ae757ac7369ec806fb1b6f6a03d52d9f584a3dff61299d676a8e13108979688f3a1d0c7a43c545b7117bef0e68a581f2875986dc76b59c640520ffec7e4742fee1c66b40c44f8dd1f4a61f6afd88d4ec7755392a3ba0e8323caf061ce24665b48fb52614e6f24d17be7c481adb0cb0c91334939987edc4d5b68ad35d3149e626c63b054d0c2c5e02cd7e6a45f8cc933e579ba03f8c261e414730391abe6ec912a2507683aba12fbda7bed0f1d2bb7e70dda15202ca8d5bfbcb125257387a58c858964c7090923a3cf8ea425f1422c0efa26120bb1bf44593db0ae6ae73bc5882ec990e2831bf8aeb1537a2d567d188aeae3f11c8b7b396fcd8e4ff2115ad2f789ec4f5b30a14ed5ab88c51d2e7c6c7c1b51b2aa18febf0db1395de09ba682cf1586916c556762ff5580b86541d76c2442c7085974242807d0027615baed4baaa0263d66f18de135fd3d9402221ccc1bf22b7e6f9cbb5ba35548de601a7d312fe3201836608950ac732a42730ac4a757c45810b1e11465f6be3823ef635201c3c5688a23751019bc6879005074dd5576c9ed560842424ed7149c98e8c4ed1b0445185c1c78902e2c9ba91e3d3230449e7ee3824acb492a4878f7f54466cdd23774eeaaeb5fe3ac114537efd2173df3aef9f061a1a047884a6609050e29cafa629354fa144df6bcf9e6f3c8bb6eca1f3a24931cd7575de58d6d0ef09c3de36def24afb72296818098e3406f8ba4ffb5ab8135187653b282a9c8e4ad89e73baab2720970f87c74e67b2191ea1431219b2326f1b90ca3650e76d388a8a85ae3392123bf1406c3dc1565abdbc688d7fecbee8870b3c460cf007c3cce5d65d4654487b3b3e2e821f014f0a13e90b43d157e90e639fcad3ae78363e7dd3227afaf91c2df65d5b5158135538653a46a1cefa71944459d5fbd72e152be7ad62b9973438d57059781748afb90860fff5fcef9267159a5f1ba7611821d6cf2ef0032730fe77f401ce1326c1465d9d7ea7b420abd1a0bde610b8652643423d9f1dd59eed123b9f1429ea8d6dae6aa122b79e04a12ba2a4335ab70467fe31345776bac6baa7cd81b1a513e9ec8834e9204522d8149f4ebe0b19b241b0160e99feead78910da56e3fadfaa665539281bb4b907ae70801842ff14f52076aba77836b60e5aead1b7a96237f1e607d728ac1abef35af0e98ae124d626d77eb645d2d0eabc0a4592e146a5e903c6e318f75987160ab2e1e9f1898ddc8bdb9dca333a2494b593c565537f3445f6fc2a3c85f71de0d40a23e33318085a37bf8279ae5637e5b1a14390a0f9b7b96c2c36d61e97a6a18d5ff561bd3eeb34f81d9d7a3ea3b89e6a0c8dddb95e5df593667568b20752c3fcad0ec5806e73d28cc57762baf2c1c32540849635b450be765a3d2f70dcb3c5bb23accb621ca8a5fd3f3adb357d8e44213f99c7345b8b8bf460974e13c69fba5dfd94dd119abf0e5f29baadf9c4819be8ef4dc667d897c6967fdecb0b9bfa2991da27d2a6fb687e78a1fda3d656e54465c4bf25a7afbd04c4df38e545bf572fbf89f9f03783407247909422041299d11a28f50ce817d7c9ed45d0e978b87299beb3368313e804974bf7eb188745d6387bc7bcedf08cc9a200ea62dafaa6240e7b9c413fa8c1be5762c4092f4192c8296f878b01ae6fac80b4764e088a09bac8b8d544968504d1ca29cf29b195270dbb0642d7f11dbfabb69614f9c9ca6d5c5bc0ba2ac06ded8ab9f285175e1d07ee2e8ffe869a20af36a7dae8cbd8bf2a8c602c4c9814d9c4eb946ca488d5b3c0e342ccfa87cc86531accd2d5df3612c88bfb33c6efc264de3656d7fd2a415008a893ca225f17c3d82a1dfc82ddf35493b264943666a5c7bfd481b31f4e6ebb78b2bc8cbc61261c804b6f263d7127c089f33f07061c5d2af07df963673801c4cced2922e850384669c58f5798593668bb59b34e44ef68acb41326ced86534acfdb32864005184ace08c468d3bd024502002e057b419bcf26a14452e8735968e046850ae399eedb5cf85e297cb89b2cb0058097cc211c8f89face8a6d6c5e088533bfff515bcb176f48d2c258649ac07d8fdf5bdf047c5b2b785582d91d3290a08ae367662381f10f96aae00a0722c5f58e33485d9e9611ef8f5fcc69cab9f5f50c6a7f18ef0eb2090ae82dcca9ab2897815fee681bb62846dbf2ec98e12c5b99761da94288bdc05e6d1eb2af0b83478705b4ad38bbea706bde5c107d3e22870f29c391f8a1f485f20ff969ae5fdc5e9788cc7d1a11c11b9a7362491ad2b798d33834fcbe267d171d3c5058326b6c7e3411cdc52764c9e28b140364a0599e2ca99077949ef93b5ee43161d181ba2441caa54d79de8207d10f8341f02e85c0741ebc2b7da89494a3020c577ca02c80fb5b0af76ce43fb4317f14448c3738609ef0660c497b52b895341b959d64dfd0ac0709d111720fbda5cdaaeedb1ad98cbbfb37eebedef4e188227a7c18e162ef1aa8a1d9276c80dfc9236ee453523e8279bf1e306bfcc9b0d6d251ee9434eb5462819f2797e7c935590057e35b1e16ce13e2d3500f3af05191717bb895b6ca2ec68c65a27326e5ceaa8255eef2dcb1b7cc3e92fee28497e658457174e6eaf75bb76e52e3a25d6ea401b928984b32d0c2bee8386b8c63965c6bca570278688c4e971c6b851b0ee68b11552521dbb1e986ade17c9a6ee1337dca6f11ac53034e19e3751bfaba4c2a7ea48bf49102659a30f2d88606fe30e2456d827e53e4e6becc2b21d9f8cd6543ff6ce21fa9ca1fb0376faaab2efdc47a97ed709630b76795bf21309f0b1241966bd4b917955a130867ebd43c113141fb647917ad3b340145b3b8713f79c1f5c4d2338cc5df62c21cb4f4113f9f2314ca4a28dfe02448ac8a09716b4d981ddf00da4692eb5f1a51d2dc5e2d29fa325b21a8faf642cdaf57473869bf72c5e2a996a9b3345346104219d3b99580f3ebe3f414f9c068748c225097f6edb783870ea420965d27cfb94b65dc7974c926bbbafa44268c29a5db4a142f0474e47428054656358f063fe0edac9c9d48be16286f3a84fd7c81efe3553507939253bc075c1d3e8432dc04ac4400fe882bdee55333d899e7e2448df2fcf36cafdbef3f32ee1b9749b477f9f102d2d973d3b0cb484bc1220f9b7a89b0cc003ade4fc449ff8379f4685d2370cb0000a37c7d10f03ea081ce2dd24fc721c6cb0110430bb5f808e47c59d2423be02685128ec8b2d19a09c0d2dfb81547a25781bf1b74cd99eac9542104c946050281a200acb75d88e5da5d3c2ac77a0f3e6a72403991906fc20edfcf5b40687986c38a57db88782a2f9f339403c12469b663a88b70f257dc0f692b6a8dd3158eccfe5724faac0094dde1b35bc76f519a3f2320271f045e19a03c66e0c3a80cbf1cde64c2f2a33c1b625bc6cfbc83d0aeb84ed41238c9a395fbbe300df0ca6b63e1974b1f13826a1cff0229e41fbf6fc20be4528b45d8941b3df01dca68dc7a2cb7eb3ac1d1fcc0d9e661b463978005353f6575ecb02bc738492c68cc4951a22af26a5c4cafa045381a1b47aa2427b1df17ebcb772b63fb58939a5049de7e06d347303d96d848841b6e4d52836fddb85b21b9bd92b8eb7a6854cacea27b3d5ec8c031f07b0a133fd9913e648afe500e506126d4055c5c3394f460fcf7c8344131897acac6d1e4cd2f65411677acad6368edece9e8c94eb16c9c87e77f2b26a3d3bd2c2e991348a83d6ef447af0f6efbc03bbcfedb826eeed2a7955e31092e3d325cd1c9e61e702f0f9ecd57d20139976fc8098a8748d1fe2a328c5892117bc808163a46d833d07399277a70228b00b5de9032b699d77da54bcc6dc7d4e0dbbddba1fb7b0e91f47a37a25beb34481bb92776951d5cb9e0f723f91a572b5904e56e7b4d53102c4e8bf4a884fcdcec74c7a452745a33c29eddbe8ab442b43d187a828d01c2b04e40c916ee2c341208f9377475d71accab66d83f1da7b6cb5dbac476da8c8386843ef17a94ec935b0098ae3578d536a5bc5d8621d91122451fe58eb0a169e9334cb7a881512ed3871a0c67a3bc904cb16ed46293f93fd608fee9dd521fe7589734c28259abc097caf65637a5488c9f36c1180137fe0ea896e81a5f12d7cb6079fea26b04e5dc92afe25d261f1b6fe6c8dba0772ede91ef78a17750db3f4df099c8037b91b23e0c6fab53f2eb3fc816dae9c67f7cadb67238f44355caf3deab7b4f5ae43f48bca07e97a1bf7b9dbfc4006b9255e83fef02622e0ec36165342fb0b94b769df122d74cad881727055ba1c10775ab9745671e9af7ddf6b3f3db9aa1e5f7d63ef417e85d098aa5a5f4f6d60ad22420d6f5037910b853e2400563ff2e19b80d9e097e9ff38e5ff2d8345da20c1b6c9550940fe410620295c02d5db7c81ba5aea7b60ec4f9136389605e5273c1c3c1284bb4e6f2ec3f0473bbcc2c098d4b075a622611797353aeae548f299ccfa7e57c6fbc4751ae1bcb6238d46cc14190190c9a219becfa7b428ae49a4bf39a375f45ed2e4ad829762e2ba45bbafa24c87f4cd160ab450469c1317e42e24eb28839d4a8a3d81358d49b53aaef3affde81e46fb7f471984e256194f195cd74169d07ffaccd2a235cd816fd219396d55eba7e3aec3c5bdd1dbfad44d5e6e63026384c88696801696be25b4117f73322604d0e40a45a3f31cd34d342b2cdedf6c9d1cf34651745593550ceb3eeb826cc9a5c5945bd64d2b0bf30ea1c75e116358c2d104bc9cd34fc45da31f51424c78e7bdfdeaef462ede2e237fba3ded23de662ccc9f28692ba4a103c9c1541690369fcace4e11fd68f98fc741cc8ea338b9bf3cc694f5e1d661e1d12c3faa0450ec265ae746ad92fb0abfe03df5d98721fac41debc445da197686bcfd105610c5f194641e2bc4813058ab0818c17a96478870bb2eb02e9752cc4e11ad82ca5644406637d05be75207aeb1f2385f3609c8bca143fd7b7fb99742ab979530f15aef95c87d0e0abf6446ab82f96027f22fb77ff8329a4549b9f4336fd68eece0693df7ccc74090529432420b1176816bcb3fdeec5842ec9ee6fb795af03c793479e95e5580b2de0f41bbb2f5bcc2fee0761b5b2c63c6f026c6ef5a7d97cfbcf69c73c26c2c0a94f7599cfbdbc49dbb8082ca5b10ef383d50f4b7c727fb4859faf82361a30b501d656dccc48b8b7e5c981807afffb9a4eaf33f55bc63a4ebca2dd1caf820670e9caf1f8114ff0d3c4aed16d2e86684d8bc10d0f1f2632af1872cc660a91709be417e789c484cbfd36d04874252fe922169f713f06e9db4a5a689d367517b9a713db75ff10b1401637e256ab6ff080a0d7d9b70e0d322e88fe3f1554aa957a47b2e27a2d1e585ac458762383169477f815f35d37e6b34384a06f6920a7257cbe52a6f5691962f5ec548f792a4524703a899f6aafcd1766ef14cc3505a30d42b1cf31a1b6b44c8f6198701a1d490fe20c77d74e57103cb412410e38822cab2e120235227562820b51873512fc0a745ead383a69e355e6444d656a4deb7dfea760fd5197e51e13d88cd4629c3dfca4f6cb7aff29a75b05cd731f2abd29b3a771fb88c25b96a85b919a360f42d43f55d3b68c185151f8e634ff711a81622469810793fd11272ab704234e290af47e35aab451686dfa63e523ea6ee82122caba3c1af43fbe010cf1558247ae9dc2e3d45a449a39a58cb3e9aae34dd19113a7648b6e29beb73207ae572f4ddb6dd28e7b963fe60c0fba7ec4d9788ef52c5eef230f2c035a032162b78aa35f409a469d82a08bd89003087d590d86923d63bc10bc15ffb625de09a6e4d1c3138877eaec034e3496e2d2b40c379307eeb1f726cd53ffc1a623dee9f86bac85b1cec10bfd2609a3e0380e1e2990f7804e9ecc42dcce2504978a18308650e077df2dee78babf84177119350fabac815f0d0b52ddc315967a897b423aa92c32fd168c124d7ed92477ef85607379b43b7354635a964b626d5ec674009cbdd0ba7d08cb1049e3622c6fdc03819ba061fe6ccb5610da2c5862e5231fde3aed52e2c2792644a0bb35894d9f6af43fabb2a1a5351816d02402f83a53170cfb1465b5138eecbcec6020fbf67d17fe6c95da1618a1255de49ffb4d0f620fe30c1dcc497b4da000533f9d5fcc7952c43521236aeb8909a9e458da526dc7e34bf56d9877b3e3ce0c1eec3579d07e7f7f1c5d876228dccfd969a66e6911635753da899321e90b42e8d8c3b49cf318acf134fc5d1ac0ad7eda1d22b063bd99df6d27ea57afb6e3c6e5e10477d55b3980aa22803fe371d8644598b9991729a34508299684cadefb64cf667026026dc894161c47732e4276b5cc77b0a7fc9936c1cbbf63959919618816a3adc6bbb8869486f31e83461808a7c0086bf78703233d41bb2039935efd701c2f2ed0159666a4b9bd4398f8d0ca98b6eddb812f1de70b033bb39a0703a053227a0633c53bb23b8d97f8ed31643847377e08fbc23d64423d6dc5cf97a8496ba433f3ee7ae7dd6b4b3c463f8ab76def00277de1915b15cf35e9fc821bebdd5da612839211136d83934b6631df53beb486469f6fff0215c9d90a8cb53897d05717a3b4c9a255228e825498fbf222c5ed1771ee545d133ad8dcd1bd55733189dba3242edf9336ae485bcac317240f30bbbc8d6d2802f6f099eb1d8608b725882efc2c91dda6e9d8aa2c8d6115615487f7c6b77aa8ceab0ddaf68a5cee255c20cab38a788fc97a73d4f99c678b5aaa108c00fa08147c648b624687cb2fbc4af4d1cb989e225f86f65f40025aadccac9376ea47ddc9758b11a1f4685d2ec8fb4d33121a09c2ca398121fe518afdc9b0bdab7eae9230a463e0077d420c583b31f7eb7dbe3ab085bb7ad841a9781d255f7500a78c35df16e040d398b05f9443a757cbf7fe44f289f4e31626477cfa60c7c74099520b6b183f2edc405f41baaffe9ee8e22d7f7998e5239683a84bb0503441906b6f0c41c3665033ffe4e5a7d62142bd03e327a10069afbf4dae46b74dafcf45b00c7f0abff56fb71d09220e61e210079bab91b697169a04f1d65244af1ff2cf3e96b37cb387657f31e0e98d1e4b7d2794b10ad454ade450f1fdd5200a9179ee408d472a1c6182f6a359ca3ed53977bf9f091c5aa364f49c3bba8b292548b47ec1b0ac529a7c99352eeea58f4d1d454ca402652f3cc26cf414045250fa91f0deac9e2f11c09ed9409e2d9feab8e97e1d404483c3a438ad29c014b41769b195b368f369412ceb78f1ad42a208b32fa3f4673fdf70892c7adc9caca1ed9fff2da72f31821ee06fed00c4fab154daa308f4c0acf91cf42583fb5dece22694895154d4c33b1f0f09486af82f376b635c8873309bd08f46ba98e5f527e6e8e48db8e0581caf4c84d3a48f13eacc6afa3b30f09760e01615e59c9fd53b9279f504205fc47bab7f6f435f2b38ce8aaaa4a7bf35b4e40c662bfb36bdb53e35ee600364cbd72dbde9407b49fdefff8183d7029ae8423990df818b6a85211ef21bd9ba317763c2884277d9305345b5afa511c3e797aac22106f33525015dec0e7844fb50b12792d6b389c9c8e12296e5f0aee1290296707dda6855a7b200c25c90ed2a962a7190310ddf980e962f0218dd019e86353c3a62446d7344d98a34152a235386e5718c30469c16b77c92ef1dcd0c2c47af36fb4c6b5552edbf116e7c621fefc782266cefa4d1cf0e903bd27d226e23d9b8d37fd312afb91dfa13f9cd61c075c0ec09948e0e8d64444682cf3a6283036275b69c4296bed4dd6a8b467b2a57448817730fcbd485217d5a52e05dc08528be23c81be31f9894eec6f03b8dbd566bcb5f54214e4d7f7a25d69da95e60535953b6f936638773295a95badb2f89da4f95f216c9383f4d2e511e60eefc34b06fe31293eee88925419bb349c20d6548e0f9b13ed5d5683216e5897dd6d668e0da70afffde17ffd34af0f5f81f63bbb6a5a2e7939daf9eba75b942e4347347269bfa975f61176b75e239e2f613c73125446f6e745b842c9ca259e3ce5edc19d036acad11fbf3dba2d571f9bab91cfe667ce0483519b139d08148e341e697cf860ab39403d5f1cb4f89f8891aed39e53f0f1cf54b22947e6da2a21d6b2688ca0dce144cf8f3cca912f5fde16823d3233cf7895aab772e566f35fa79f91b06b29b2e48f6130ca0c7f9b6b53aba2b435c14812897b22f980b379b495788be17c31343a07b6855ec23be251b4ce2bd7209bfc62cd3b3a01f7dedf898bc73bf7541c3fb4ca5c288de0a53ebd7f0d5411654a5a1cd1850ffdffabb0accad700eeed5b058c9fd9ecd99947f9a243f231d967e03f2df49534baad2b53107717e689857ec7de6eb921009376994ca531ce059206646529e8af1ec9c1a1615cdecd1a613922f9e96148cfeca5d256eb90539ed1cb8a2c60b71e5479c470c34df9a322105439bc81e59ef9d1f09fc62546b82ef1b051b5eec0c881f52aa9c00cc878fafb2de5bd46ea83e80837f98708e156546d598e9ead5532e0dc55bfbd78f6db8e7a9ca7b1180d7817388eae07af5ec0f2603214f766ab448d12516fbf1515544cafc0343a597617dd2855b3a16fd233acf41aa8ac32dec7fc0312bd6d3bae180fc098f51dc99290a2cb8df9f954183070759740fef2677ccb2cc78187dc1207f084d0f444da13bc61bc9749f82a3277e1964c0605559387b34c054d555fd655a03dc58e0271470dbec928462ca248f28ea34914237c1a1a94a991fbc9483f4bbb73a981f813a5f150d49fed43382e74441d9d0ea89a4dccdbff7d9d52830c83d9af924081e462ec998368975c7257f421fbb163c4713b720f9a200dad620df934e79589c6735288cda559c91e99cb24dfe8c1649dac1be7901262c84d840998f49ae31ff2e0f41146fef5a26d225b450ec6799f82f2dbe71f5fcc47d468837eeba30cc6efe2e2de4914b33351ea1eba36497eff988b32cdc0f521022973b187a35895f70bba0f4dbdf8140fbbfdfaef9c309cedebd2b3281253321f6cd72ce81da0b8becda2566e9d425f88ca10e27a540ce5789b84501e5e3910e21d8fdbf7bb02ae2062717a2abac73abe1a3b7e71954207c915e857977af5419c40754dc9806a8221d8a38c79d8f2043aed3f7aaf6d9ce4e4e42d9a0b07e9aa31c3b150178882305ec432b6109de9a1bc402da4c73517e3e6cd7b5d71b9d7b5339e1b5967ea7b8d39e630afa947473f2cedbf085f860cd4b08c98908b86c8a8895353b7c4846824005d3781640ca5b9a23d64cec31243a0095115ae913d6fc7530c5b8c3c02b951862277e5a7a78b6db53b86a67d3076572d4d1d3a2b2b5ba88c4aad3ca85f9607fbbb4dcb1db7f7552cb3e05973e691cbd01f182baf5586590c6d41333e2617a540c29aa7fe849fb4bea8430ca060bf56c8751d143c432d95b471d5924492bfaed0506cdb81121653a390abef45aa47b3dd029b2d06f8e81b7d79f51da437493481ad1f937fcf1bbf892188501206cec29727ac91a2ab37a771ebe1d6dfa7cfa86c8cb671885364658615220e796cda803278ca47752512e0984c60fb5137bf9b5277ca7684a1844027c1b9690b2eeb89443d9c971b227948684a33351f8679f758506962913ec1f3f1fe43a4139d99adaa3e052cb9c5c18867daccf41fc2f7b6efa220658d1f17fa48e8a520faf00d77a6037cf324bf42b66cfb081a1fb0fcce52c3c4a360d1b1dc235b1fa73742ce90d5138cae2d90fa88fb7678cb8160026721d6e03271a62da7b002453fcea0886dc00e45a5acd756a848af1eb5fbd219c0c624fb3ed42008717</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>数据结构题目</title>
    <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98%E7%9B%AE.html</url>
    <content><![CDATA[<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
# [面试题59 - I. 滑动窗口的最大值](https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/)（LeetCode）（单调队列）

<p>给定一个数组 <code>nums</code> 和滑动窗口的大小 <code>k</code>，请找出所有滑动窗口里的最大值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [1,3,-1,-3,5,3,6,7], 和 k &#x3D; 3</span><br><span class="line">输出: [3,3,5,5,6,7] </span><br><span class="line">在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; r;</span><br><span class="line">        <span class="keyword">if</span>(!nums.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> max=nums[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> maxindex=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+k&lt;=nums.size();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(maxindex==i<span class="number">-1</span>||i==<span class="number">0</span>)&#123;	<span class="comment">//第一个窗口或者是前一个窗口最大值已不在当前窗口</span></span><br><span class="line">                    max=nums[i];</span><br><span class="line">                    maxindex=i;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(max&lt;nums[i+j])&#123;</span><br><span class="line">                            max=nums[i+j];</span><br><span class="line">                            maxindex=i+j;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;						<span class="comment">//前一个窗口最大值还在当前窗口</span></span><br><span class="line">                    <span class="keyword">if</span>(max&lt;nums[i+k<span class="number">-1</span>])&#123;</span><br><span class="line">                        max=nums[i+k<span class="number">-1</span>];</span><br><span class="line">                        maxindex=i+k<span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                r.push_back(max);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>思路：滑动窗口就是在前面加一个元素，后面减去一个元素，这里考虑了减去的元素是不是等于最大的元素，如果是，就找当前的窗口的最大元素，不是的话，说明前一窗口的最大元素仍在窗口，就将前一个窗口最大元素跟新加的元素比较，以确定当前窗口最大元素。</p>
<p>执行用时 :28 ms, 在所有 C++ 提交中击败了89.08%的用户</p>
<p>内存消耗 :15.7 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>缺点：在最大值在现有窗口被去除后找最大值的时间复杂度为O(k）</p>
<p>改进版本</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">       <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; deq;</span><br><span class="line">       <span class="keyword">int</span> n = nums.size();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">           <span class="keyword">while</span>(!deq.empty() &amp;&amp; nums[i] &gt; nums[deq.back()])&#123;</span><br><span class="line">               deq.pop_back();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (!deq.empty() &amp;&amp; deq.front() &lt; i - k + <span class="number">1</span>) deq.pop_front();</span><br><span class="line">           deq.push_back(i);</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= k <span class="number">-1</span>) ans.push_back(nums[deq.front()]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure>

<p>思路：维护一个单调队列，满足头为最大值，队列里的元素都为窗口元素。每次移动，检查添加元素是否大于尾元素，大于则去除，直到队列里只有比添加元素大的元素。之后检查头元素是不是不在当前窗口，不在则去除。最后头元素就是当前窗口最大的元素。</p>
<p>在窗口数大的时候优化明显,总体的时间复杂度是O(n)。</p>
<p>执行用时 :36 ms, 在所有 C++ 提交中击败了80.64%的用户</p>
<p>内存消耗 :16.3 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
]]></content>
      <tags>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>排序专题</title>
    <url>/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98.html</url>
    <content><![CDATA[<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">


<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span>&#123; <span class="comment">//选择排序 //超时</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> min=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.size();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[min]&gt;nums[j])</span><br><span class="line">                    min=j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(min!=i)</span><br><span class="line">                swap(nums[min],nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void bubbleSort(vector&lt;int&gt;&amp; nums)&#123; &#x2F;&#x2F;冒泡排序 &#x2F;&#x2F;超时</span><br><span class="line">    for(int i&#x3D;1;i&lt;nums.size();i++)&#123;</span><br><span class="line">        bool flag&#x3D;false;</span><br><span class="line">        for(int j&#x3D;nums.size()-1;j&gt;&#x3D;i;j--)&#123;</span><br><span class="line">            if(nums[j-1]&gt;nums[j])&#123;</span><br><span class="line">                swap(nums[j-1],nums[j]);</span><br><span class="line">                flag&#x3D;true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!flag)return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)&#123;	<span class="comment">//i代表现在要插入的元素的序号</span></span><br><span class="line">            <span class="keyword">int</span> j=i,tmp=nums[i];		<span class="comment">//</span></span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;nums[j<span class="number">-1</span>]&gt;nums[i])&#123;</span><br><span class="line">                nums[j]=nums[j<span class="number">-1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;            </span><br><span class="line">            nums[j]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span>&#123;  <span class="comment">//希尔排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> grap=nums.size()/<span class="number">2</span>;grap&gt;<span class="number">0</span>;grap=grap/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=grap;i&lt;nums.size();i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp=nums[i],j;</span><br><span class="line">                <span class="keyword">for</span>(j=i;j&gt;=grap&amp;&amp;nums[j-grap]&gt;tmp;j-=grap)&#123;</span><br><span class="line">                    nums[j]=nums[j-grap];</span><br><span class="line">                &#125;</span><br><span class="line">                nums[j]=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">random_device rd;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> leftIndex,<span class="keyword">int</span> rightIndex)</span></span>&#123; <span class="comment">//快排</span></span><br><span class="line">       <span class="keyword">if</span>(leftIndex&gt;rightIndex)</span><br><span class="line">           <span class="keyword">return</span> ;</span><br><span class="line">       <span class="keyword">int</span> left=leftIndex;</span><br><span class="line">       <span class="keyword">int</span> right=rightIndex;</span><br><span class="line">       <span class="keyword">int</span> index=rd()%(right-left+<span class="number">1</span>)+left;</span><br><span class="line">       <span class="keyword">int</span> privt=nums[index];</span><br><span class="line">       swap(nums[index],nums[left]);</span><br><span class="line">       <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">           <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]&gt;=privt)right--;</span><br><span class="line">           nums[left]=nums[right];</span><br><span class="line">           <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]&lt;=privt)left++;</span><br><span class="line">           nums[right]=nums[left];</span><br><span class="line">       &#125;</span><br><span class="line">       nums[left]=privt;</span><br><span class="line">       quickSort(nums,leftIndex,left<span class="number">-1</span>);</span><br><span class="line">       quickSort(nums,left+<span class="number">1</span>,rightIndex);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.size()/<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        maxHeapify(nums,i,nums.size()<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.size()<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        swap(nums[i],nums[<span class="number">0</span>]);</span><br><span class="line">        maxHeapify(nums,<span class="number">0</span>,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxHeapify</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dad=start;</span><br><span class="line">    <span class="keyword">int</span> son=start*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(son&lt;=end)&#123;</span><br><span class="line">        <span class="keyword">if</span>(son+<span class="number">1</span>&lt;=end&amp;&amp;nums[son+<span class="number">1</span>]&gt;nums[son])</span><br><span class="line">            ++son;</span><br><span class="line">        <span class="keyword">if</span>(nums[dad]&gt;nums[son])</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            swap(nums[dad],nums[son]);</span><br><span class="line">            dad=son;</span><br><span class="line">            son=dad*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><p>思路：建立一个(max-min)+1大小的数组。对数组的每一个元素都可以找到对应的x-min的位置</p>
<p>该数组记录每一个数到底有多少个。然后通过寻找这个数组，就可以确定元素在排序后的位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给出一个例子:[5,1,1,2,0,0]</span><br><span class="line">该计数数组的变化为：</span><br><span class="line">         2 2 1 0 0 1 &#x2F;&#x2F;记录了数组中对应的个数</span><br><span class="line">         2 4 5 5 5 6 &#x2F;&#x2F;前一个元素加到后面的元素 countArray[i+1]+&#x3D;countArray[i];</span><br><span class="line">nums:5 ::2 4 5 5 5 5 &#x2F;&#x2F;找元素5找到6，6-1就是5在排序好的数组的位置，更新数组为6-1</span><br><span class="line">nums:1 ::2 3 5 5 5 5 &#x2F;&#x2F;找元素1找到5，5-1就是1在排序好的数组的位置，更新数组为5-1</span><br><span class="line">nums:1 ::2 2 5 5 5 5 &#x2F;&#x2F;找元素1找到5，5-1就是1在排序好的数组的位置，更新数组为5-1</span><br><span class="line">nums:2 ::2 2 4 5 5 5 &#x2F;&#x2F;找元素2找到4，4-1就是2在排序好的数组的位置，更新数组为4-1</span><br><span class="line">nums:0 ::1 2 4 5 5 5 &#x2F;&#x2F;找元素0找到2，2-1就是0在排序好的数组的位置，更新数组为2-1 </span><br><span class="line">nums:0 ::0 2 4 5 5 5 &#x2F;&#x2F;找元素0找到1，1-1就是0在排序好的数组的位置，更新数组为1-1</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CountingSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// int maxnum=*max_element(nums.begin(),nums.end());</span></span><br><span class="line">        <span class="comment">// int minnum=*min_element(nums.begin(),nums.end());</span></span><br><span class="line">        <span class="keyword">int</span> maxnum=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> minnum=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            maxnum=max(maxnum,nums[i]);</span><br><span class="line">            minnum=min(minnum,nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> offset=maxnum-minnum+<span class="number">1</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">countArray</span><span class="params">(offset,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)</span><br><span class="line">            ++countArray[num-minnum];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;countArray.size()<span class="number">-1</span>;i++)</span><br><span class="line">            countArray[i+<span class="number">1</span>]+=countArray[i];</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">tmpArray</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">            tmpArray[--countArray[nums[i]-minnum]]=nums[i];</span><br><span class="line">        nums.assign(tmpArray.begin(),tmpArray.end());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>天国旅立</title>
    <url>/%E5%A4%A9%E5%9B%BD%E6%97%85%E7%AB%8B.html</url>
    <content><![CDATA[<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">

<p><img src="https://i.loli.net/2019/09/09/IcUw5WsjhbGYmlT.png" alt="Saved_Memory2.png"></p>
<p><img src="https://i.loli.net/2019/09/09/XDAKdzLsoYnP3HF.png" alt="Saved_Memory8.png"><br><img src="https://i.loli.net/2019/09/09/KtRvuZnfELqWC9k.png" alt="Saved_Memory9.png"><br><img src="https://i.loli.net/2019/09/09/QCnb92H8UfmLEkO.png" alt="Saved_Memory10.png"><br><img src="https://i.loli.net/2019/09/09/WYmx4RS1ebr6DIF.png" alt="Saved_Memory3.png"><br><img src="https://i.loli.net/2019/09/09/BV2Fr1oiyPvDxqd.png" alt="Saved_Memory4.png"><br><img src="https://i.loli.net/2019/09/09/ihdkgzsEnYFUTN7.png" alt="Saved_Memory6.png"><br><img src="https://i.loli.net/2019/09/09/YJrthXoDLxFyTGq.png" alt="Saved_Memory1.png"><br><img src="https://i.loli.net/2019/09/09/PlLtiIhN3yRA4ns.png" alt="Saved_Memory5.png"><br><img src="https://i.loli.net/2019/09/09/nz9eSMLa5yUxvfK.png" alt="Saved_Memory7.png"><br><img src="https://i.loli.net/2019/09/09/xagRIqXjJKv2ny7.png" alt="Saved_Memory11.png"><br><img src="https://i.loli.net/2019/09/09/tT4IaXVMRHxGJsS.png" alt="Saved_Memory14.png"><br><img src="https://i.loli.net/2019/09/09/pDMBcbTXQK1Asg5.png" alt="Saved_Memory12.png"><br><img src="https://i.loli.net/2019/09/09/b3wZcoDHPxG21dm.png" alt="Saved_Memory13.png"><br><img src="https://p.pstatp.com/origin/fe8f000115e907fd41cd" alt="Saved_Memory15.png"></p>
]]></content>
      <tags>
        <tag>Gallery</tag>
      </tags>
  </entry>
  <entry>
    <title>樱之诗感想</title>
    <url>/%E6%A8%B1%E4%B9%8B%E8%AF%97%E6%84%9F%E6%83%B3.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="400aa9961022d25dc4a4e6c2bc44e11012824d6be83f7974d9b65daa171bf8ad"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>路人女主感想</title>
    <url>/%E8%B7%AF%E4%BA%BA%E5%A5%B3%E4%B8%BB%E6%84%9F%E6%83%B3.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="77d05da461a67e7428886412a8655dc74bf302372c90d32c14d4ec9bc4a3ea27"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>euphoria感想</title>
    <url>/euphoria%E6%84%9F%E6%83%B3.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="fb9574920f156609575123061dd8bef31631815195cc0ff4e68a826e39768d42"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>计算机网络运输层笔记</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%BF%90%E8%BE%93%E5%B1%82%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">

<p>`<strong>运输层</strong></p>
<p> <img src="https://i.loli.net/2020/06/11/8uy5a2vfp1lMSNx.png" alt="运输层.png"></p>
<h1 id="运输层协议概述"><a href="#运输层协议概述" class="headerlink" title="运输层协议概述"></a>运输层协议概述</h1><h2 id="进程之间端到端的逻辑通信"><a href="#进程之间端到端的逻辑通信" class="headerlink" title="进程之间端到端的逻辑通信"></a>进程之间端到端的逻辑通信</h2><h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><p>·        发送方不同的应用进程都可以使用同一个运输层协议传送数据</p>
<h3 id="分用"><a href="#分用" class="headerlink" title="分用"></a>分用</h3><p>·        是指接收方的运输层在剥去报文的首部后能够把这些数据正确交付目的应用进程。</p>
<h2 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h2><h2 id="运输层的端口"><a href="#运输层的端口" class="headerlink" title="运输层的端口"></a>运输层的端口</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>·        软件端口</p>
<p>·        16位65535</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>·        服务端端口</p>
<p>•      熟知端口号（0-1023）</p>
<p>•      登记端口号（1024-49151）</p>
<p>·        客户端端口（短暂端口号）（49152-65535）</p>
<h1 id="UDP-User-Datagram-Protocol）用户数据报协议"><a href="#UDP-User-Datagram-Protocol）用户数据报协议" class="headerlink" title="UDP(User Datagram Protocol）用户数据报协议"></a>UDP(User Datagram Protocol）用户数据报协议</h1><h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h2><p>不需要先建立连接（不可靠）</p>
<p>相比ip数据报增加的功能</p>
<p>·        复用和分用</p>
<p>·        差错检测</p>
<p>面向报文（直接使用应用层报文）</p>
<p>没有拥塞控制（用于多媒体通信）</p>
<p>n对n通信（n=1或多）</p>
<p>首部（8字节）开销小</p>
<p>不用套接字</p>
<h2 id="首部"><a href="#首部" class="headerlink" title="首部"></a>首部</h2><p>源端口2位</p>
<p>目的端口2位</p>
<p>长度2位</p>
<p>校验和2位</p>
<p>·        首部和数据部分一起校验</p>
<p>伪首部12位</p>
<p>·        计算校验和</p>
<p>·        不传输</p>
<h1 id="TCP（Transmission-Control-Protocol）-传输控制协议"><a href="#TCP（Transmission-Control-Protocol）-传输控制协议" class="headerlink" title="TCP（Transmission Control Protocol） 传输控制协议"></a>TCP（Transmission Control Protocol） 传输控制协议</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>提供面向连接的服务（不多播或广播）</p>
<p>·        只能点对点</p>
<p>可靠交付的服务</p>
<p>全双工通信</p>
<p>面向字节流</p>
<p>·        随时截断发送给上层</p>
<p>•      根据拥塞情况和窗口值决定发送大小</p>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><h3 id="连接的端点：套接字socket"><a href="#连接的端点：套接字socket" class="headerlink" title="连接的端点：套接字socket"></a>连接的端点：套接字socket</h3><p>·        TCP 连接 ：：= {socket1, socket2} = {(IP1: port1), (IP2: port2)}</p>
<h2 id="可靠传输的工作原理（使用协议降低出错）"><a href="#可靠传输的工作原理（使用协议降低出错）" class="headerlink" title="可靠传输的工作原理（使用协议降低出错）"></a>可靠传输的工作原理（使用协议降低出错）</h2><h3 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h3><p>·        每发送完一个分组就停止发送， 等待对方的确认。 在收到确认后再发送下一个分组。</p>
<p>·        情况</p>
<p>•      </p>
<p><img src="https://i.loli.net/2020/06/11/gGUXlkcuzNnqeAm.png" alt="clip_image002.png"></p>
<p>•      </p>
<p><img src="https://i.loli.net/2020/06/11/dZvIzsNBw2q8liR.png" alt="clip_image004.png"></p>
<p>•      A只要超过了一段时间（超时计时器）仍然没有收到确认， 就认为刚才发送的分组丢失了，因而重传前面发送过的分组 。 这就叫做超时重传。</p>
<p>•      注意事项</p>
<p>•      发送方暂存已发送分组</p>
<p>•      分组标号</p>
<p>•      设计重传时间长于往返时间</p>
<p>•      确认丢失和确认迟到</p>
<p>•      重复的确认收下就丢弃</p>
<p>•      重复的分组收到后丢弃，然后发送确认</p>
<p>·        信道利用率</p>
<p>•      </p>
<p><img src="https://i.loli.net/2020/06/11/mPD2n7856eWlc4O.png" alt="clip_image006.png"></p>
<p>•      </p>
<p><img src="https://i.loli.net/2020/06/11/gbGycatLwp6K4ov.png" alt="clip_image008.png"></p>
<h3 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h3><p>·         </p>
<p><img src="https://i.loli.net/2020/06/11/EV6JAHmnpouwtIv.png" alt="clip_image010.png"></p>
<p>•      累积确认</p>
<p>•      接收方不必对收到的分组逐个发送确认， 而是在收到几个分组后， 对按序到达的最后一个分组发送确认</p>
<p>•      缺点</p>
<p>•      不能向发送方反映出接收方已经正确收到的所有分组的信息。</p>
<p>•      go-back-N</p>
<p>•      优点</p>
<p>•      容易实现， 即使确认丢失也不必重传。</p>
<h2 id="TCP报文段的首部格式"><a href="#TCP报文段的首部格式" class="headerlink" title="TCP报文段的首部格式"></a>TCP报文段的首部格式</h2><h3 id="报文段"><a href="#报文段" class="headerlink" title="报文段"></a>报文段</h3><p>·        TCP报文段首部的前20个字节是固定的（图5-14), 后面有4n字节是根据需要而增加<br> 的选项(n是整数）。 因此TCP首部的最小长度是20字节。</p>
<p>·         </p>
<p><img src="https://i.loli.net/2020/06/11/pVDPEubF5m1RL7Y.png" alt="clip_image012.png"></p>
<p>•      源端口和目的端口 各占 2 个字节，</p>
<p>•      序号 占 4 字节。</p>
<p>•      确认号 占 4 字节=序号+长度+1</p>
<p>•      希望下一个发送分组的序号</p>
<p>•      数据偏移 占 4 位（0-15）可加长到60字节</p>
<p>•      首部长度</p>
<p>•      保留 占 6 位， 保留为今后使用， 但目前应置0。</p>
<p>•      紧急 URG</p>
<p>•      当 URG 置 l 时， 发送应用进程就告诉发送方的 TCP 有紧急数据要传送。 千是发送方TCP 就把紧急数据插入到本报文段数据的最前面， 而在紧急数据后面的数据仍是普通数据。 这时要与首部中紧急指针(Urgent Pointer)字段配合使用。</p>
<p>•      确认 ACK (ACKnowledgment) 仅当 ACK= 1 确认号字段才有效。 当 ACK=0时， 确认号无效。</p>
<p>•      推送PSH (PuSH)</p>
<p>•      不等缓存满直接向上交付</p>
<p>•      复位RST ( ReSeT)</p>
<p>•      当RST= 1时， 表明 TCP连接中出现严重差错（如由于主机崩溃或其他原因）， 必须释放连接， 然后再重新建立运输连接。RST置l还用拒绝一个非法的报文段或拒绝打开一个连接。RST 也可称为重建位或重置位 。</p>
<p>•      同步SYN</p>
<p>•      同步SYN ( SYNchron ization) 在连接建立时用来同步序号。 当SYN = 1 而 ACK= 0 时， 表明这是一个连接请求报文段。 对方若同意建立连接， 则应在响应的报文段中使SYN= 1 和ACK= 1。 </p>
<p>•      终止FIN</p>
<p>•      终止连接</p>
<p>•      窗口 占2字节</p>
<p>•      窗口字段明确指出了现在允许对方发送的数据量</p>
<p>•      检验和</p>
<p>•      跟udp的伪首部一样</p>
<p>•      伪首部第4 个字段中的 17 改为6<br> (TCP 的协议号是 6),</p>
<p>•      紧急指针 占2字节</p>
<p>•      紧急指针仅在URG= 1时才有意义， 它指出本报文段中的紧急数据的字节数（紧急数据结束后就是普通数据）。无视窗口</p>
<p>•      选项 最长40字节</p>
<p>•      TCP 最初只规定了一种选项， 即最大报文段长度MSS (Maximum Segment Size)</p>
<p>•      窗口扩大选项 3字节 （16+s）偏移量</p>
<p>•      时间戳选项 10字节</p>
<p>•      计算往返时间RTT</p>
<p>•      防止序号绕回(处理序号超过2^32的情况)</p>
<p>•      选择确认选项</p>
<p>•      待续</p>
<h2 id="TCP-可靠传输的实现"><a href="#TCP-可靠传输的实现" class="headerlink" title="TCP 可靠传输的实现"></a>TCP 可靠传输的实现</h2><h3 id="以字节为单位的滑动窗口"><a href="#以字节为单位的滑动窗口" class="headerlink" title="以字节为单位的滑动窗口"></a>以字节为单位的滑动窗口</h3><p>·        根据窗口值构造发送窗口</p>
<p>•      </p>
<p><img src="https://i.loli.net/2020/06/11/jVUJ6yrOawzovEm.png" alt="clip_image014.png"></p>
<p>•      P3 -P1 =A 的发送窗口<br> P2 -P1 =已发送但尚未收到确认的字节数<br> P3 -P2 =允许发送但当前尚未发送的字节数（又称为可用窗口或有效窗口）</p>
<p>•      时延影响，发送窗口一般小于窗口值</p>
<p>•      对于不按序到达的数据应如何处理， TCP 标准并无明确规定，若丢弃，增加网络负担</p>
<p>•      第三， TCP 要求接收方必须有累积确认的功能， 这样可以减小传输开销，可以将要发送的数据合并确认信息，但不应推迟太久</p>
<h3 id="超时重传时间的选择"><a href="#超时重传时间的选择" class="headerlink" title="超时重传时间的选择"></a>超时重传时间的选择</h3><p>·        自适应算法</p>
<p>•      TCP保留了RTT的一 个加权平均往返<br> 时间RTTs( 这又称为平滑的往返时间，</p>
<p>•      新的RTTs = (1 -a) x (旧的RTTs) + a x ( 新的RTT样本）0&lt;=a&lt; 1</p>
<p>•      报文段的往返时间RTT</p>
<p>•      超时重传时间RTO</p>
<p>•      RTO = RTTs + 4 x RTTD</p>
<p>•      RTTD 是RTT 的偏差的加权平均值</p>
<p>•      新的RTTD = (1 - β) x (旧的RTTo)+βx|RTTs-新的RTT样本|<br> 这里β是个小于 1 的系数， 它的推荐值是1/4</p>
<p>•      往返时间的测量</p>
<p>•      Kam算法</p>
<p>•      在计算加权平均 RTTS时， 只要报文段重传了，就不采用其往返时间样本。 这样得出的加权平均RTTS和RTO就较准确。</p>
<p>•      修正</p>
<p>•      文段每重传一次， 就把超时重传时间RTO增大一些。 典型的做法是取新的重传时间为旧的重传时间的 2 倍。 当不再发生报文段的重传时，才计算超时重传时间。</p>
<h3 id="选择确认SACK"><a href="#选择确认SACK" class="headerlink" title="选择确认SACK"></a>选择确认SACK</h3><p>·        解决接收到的字节流序号不连续的问题</p>
<p>·         如果要使用选择确认 SACK, 那么在建立 TCP 连接时， 就要在 TCP 首部的选项中加上“ 允许 SACK” 的选项</p>
<p>·         由千首部选项的长度最多只有 40 字节， 而指明一个边界就要用掉4字节（因为序号有 32 位， 需要使用4个字节表示）， 因此在选项中最多只能指明 4 个字节块的边界信息。 这是因为 4 个字节块共有 8 个边界， 因而需要用 32 个字节来描述。 另外还需要两个字节。一个字节用来指明是 SACK 选项， 另一个字节是指明这个选项要占用多少字节。 如果要报告五个字节块的边界信息</p>
<p>·        4个边界，两个块 用了4*4字节+2字节（sack+sack长度）</p>
<h2 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h2><p> 发送方的发送速率不要太快，要让接收方来得及接收。</p>
<h3 id="利用滑动窗口实现流量控制"><a href="#利用滑动窗口实现流量控制" class="headerlink" title="利用滑动窗口实现流量控制"></a>利用滑动窗口实现流量控制</h3><p>·        通过控制窗口值控制速率</p>
<p>·        发送方的发送窗口不能超过接收方给出的接收窗口的数值。 请注意， TCP 的窗口单位是字节， 不是报文段。</p>
<p>·        为了防止0窗口后的新窗口丢失</p>
<p>•      发送方 持续计时器</p>
<p>•      发送一个零窗口探测报文段</p>
<p>•      若为窗口仍为0</p>
<p>•      持续探测</p>
<p>•      若为窗口不为0</p>
<p>•      继续传输</p>
<h3 id="TCP-的传输效率"><a href="#TCP-的传输效率" class="headerlink" title="TCP 的传输效率"></a>TCP 的传输效率</h3><p>·        发送时机机制</p>
<p>•      第一种机制是TCP维持一个变量， 它等于最大报文段长度MSS。 只要缓存中存放的数据达到MSS 字节时， 就组装成一个TCP 报文段发送出去。 </p>
<p>•      第二种机制是由发送方的应用进程指明要求发送报文段，即TCP支持的推送(push)操作。 </p>
<p>•       第三种机制是发送方的一个计时器期限到了， 这时就把当前已有的缓存数据装入报文段（但长度不能超过MSS) 发送出去。</p>
<p>·        Nagle 算法</p>
<p>•      若发送应用进程把要发送的数据逐个字节地送到 TCP 的发送缓存， 则发送方就把第一个数据字节先发送出去， 把后面到达的数据字节都缓存起来。 当发送方收到对第一个数据字符的确认后， 再把发送缓存中的所有数据组装成一个报文段发送出去， 同时继续对随后到达的数据进行缓存。 只有在收到对前一个报文段的确认后才继续发送下一个报文段</p>
<p>•      规定： 当到达的数据已达到发送窗口大小的一半或已达到报文段的最大长度时， 就立即发送一个报文段。 这样做， 就可以有效地提高网络的吞吐量。</p>
<p>·        糊涂窗口综合征</p>
<p>•      现象</p>
<p>•      TCP 接收方的缓存已满， 而交互式的应用进程一次只从接收缓存中读取1个字节（这样就使接收缓存空间仅腾出1个字节）， 然后向发送方发送确认，把窗口设置为1个字节（但发送的数据报是40字节长）。 接着， 发送方又发来l个字节的数<br> 据（请注意， 发送方发送的IP数据报是41字节长）。 接收方发回确认， 仍然将窗口设置为<br> l 个字节。 这样进行下去， 使网络的效率很低。</p>
<p>•      解决</p>
<p>•      接收方等待一段时间， 使得或者接收缓存已有足够空间容纳一个最长的报文段， 或者等到接收缓存已有一半空闲的空间。 只要出现这两种情况之一， 接收方就发出确认报文， 并向发送方通知当前的窗口大小。 此外， 发送方也不要发送太小的报文段而是把数据积累成足够大的报文段， 或达到接收方缓存的空间的一半大小。</p>
<h2 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h2><h3 id="拥塞控制的一般原理"><a href="#拥塞控制的一般原理" class="headerlink" title="拥塞控制的一般原理"></a>拥塞控制的一般原理</h3><p>·        拥塞</p>
<p>•      定义</p>
<p>•      在某段时间， 若对网络中某一资源的需求超过了该资源所能提供的可用部分， 网络的性能<br> 就要变坏。 这种情况就叫做拥塞(congestion)。</p>
<p>•      任意增加一些资源不但不能解决拥塞问题， 而且还可能使网络的性能更坏。拥塞常常趋千恶化。</p>
<p>•      原因</p>
<p>•      复杂</p>
<p>•      某个结点缓存的容量太小时， 到达该结<br> 点的分组因无存储空间暂存而不得不被丢弃。</p>
<p>•      理机处理的速率太慢可能引起网络的拥塞。 简单地将处理机的速率提高， 可能会使上述情况缓解一些， 但往往又会将瓶颈转移到其他地方。</p>
<p>·        拥塞控制</p>
<p>•      定义</p>
<p>•      防止过多的数据注入到网络中， 这样可以使网络中的路由器或链路不致过载。</p>
<p>•      是一个全局性的过程</p>
<p>•      拥塞控制与流量控制的关系</p>
<p>•      关系密切</p>
<p>•      流量控制往往是指点对点通信量的控制， 是个端到端的问题</p>
<p>•      </p>
<p><img src="https://i.loli.net/2020/06/11/Rw6FqG42QnVoJLN.png" alt="clip_image016.png"></p>
<p>•      方法</p>
<p>•      开环控制</p>
<p>•      在设计网络时事先将有关发生拥塞的因素考虑周到， 力求网络在工作时不产生拥塞。</p>
<p>•      闭环控制</p>
<p>•      监测网络系统以便检测到拥塞在何时、 何处发生。</p>
<p>•      把拥塞发生的信息传送到可采取行动的地方。</p>
<p>•      调整网络系统的运行以解决出现的问题。</p>
<h3 id="TCP的拥塞控制方法"><a href="#TCP的拥塞控制方法" class="headerlink" title="TCP的拥塞控制方法"></a>TCP的拥塞控制方法</h3><p>·        四种方法共同使用</p>
<p>•      慢开始(slow-start)</p>
<p>•      由小到大逐渐增大发送窗口（指数增加）</p>
<p>•      拥塞窗口cwnd每次的增加量=min (N, SMSS )</p>
<p>•      N 是原先未被确认的、 但现在被刚收到的确认报文段所确认的字节数。</p>
<p>•      拥 塞 避 免(congestion avoidance)</p>
<p>•      拥塞避免算法的思路是让拥塞窗口cwnd缓慢地增大， 即每经过一个往返时间RTT就把发送方的拥塞窗口 cwnd 加1,而不是像慢开始阶段那样加倍增长。 因此 在拥塞避免阶段就有“加法增大” AI (Additive Increase)的 特点。 这表明在拥塞避免阶段，拥塞窗口cwnd按线性规律缓慢增长， 比慢开始算法的拥塞窗口增长速率缓慢得多。</p>
<p>•       快重传(fast retransmit)</p>
<p>•      发送方只要一连收到3个重复确认， 就知道接收方确实没有收到报文段M3, 因而应当立即进行重传</p>
<p>•      </p>
<p><img src="https://i.loli.net/2020/06/11/84hODIkWaSi6LZR.png" alt="clip_image018.png"></p>
<p>•      快重传可以使整个网络的吞吐量提高约20%。</p>
<p>•      快恢复(fast recovery)</p>
<p>•      发送方调整门限值ssthresh = cwnd / 2</p>
<p>•      拥塞窗口cwnd= ssthresh</p>
<p>•      开始执行拥塞避免算法</p>
<p>•      概要发送方控制拥塞窗口的原则 是：只要网络没有出现拥塞，拥塞窗口就可以再增大一些， 以便把更多的分组发送出去， 这样就可以提高网络的利用率。 但只要网络出现拥塞或有可能出现拥塞，就必须把拥塞窗口减小一些， 以减少注入到网络中的分组数， 以便缓解网络出现的拥塞。</p>
<p>•      发送方又是如何知道网络发生了拥塞</p>
<p>•      判断网络拥塞的依据就是出现了超时。</p>
<p>•      慢开始门限 ssthresh</p>
<p>•      cwnd&lt; ssthresh时， 使用上述的慢开始算法。</p>
<p>•      cwnd&gt; ssthresh时， 停止使用慢开始算法而改用拥塞避免算法。</p>
<p>•      cwnd= ssthresh时， 既可使用慢开始算法， 也可使用拥塞避免算法。</p>
<p>•      </p>
<p><img src="https://i.loli.net/2020/06/11/ACFKPpbcMh4TLUu.png" alt="clip_image019.png"></p>
<p>·        流程图</p>
<p>•      </p>
<p><img src="https://i.loli.net/2020/06/11/mwjQfucqle7pkgP.png" alt="clip_image021.png"></p>
<h3 id="主动队列管理AQM"><a href="#主动队列管理AQM" class="headerlink" title="主动队列管理AQM"></a>主动队列管理AQM</h3><p>·        略</p>
<h2 id="TCP的运输连接管理"><a href="#TCP的运输连接管理" class="headerlink" title="TCP的运输连接管理"></a>TCP的运输连接管理</h2><h3 id="运输连接"><a href="#运输连接" class="headerlink" title="运输连接"></a>运输连接</h3><p>·        连接建立</p>
<p>•      要解决的问题</p>
<p>•      要使每一方能够确知对方的存在</p>
<p>•      要允许双方协商 一些参数</p>
<p>•      能够对运输实体资源</p>
<p>•      主动发起连接建立的应用进程叫做客户(client),<br> 而被动等待连接建立的应用进程叫做服务器(server)。</p>
<p>•      过程</p>
<p>•      三次握手</p>
<p><img src="https://i.loli.net/2020/06/11/lED46Aticw5K71x.png" alt="clip_image022.png"></p>
<p>·        数据传送</p>
<p>·        连接释放</p>
<p>•      过程</p>
<p>•      四报文握手</p>
<p><img src="https://i.loli.net/2020/06/11/hjVpKM3yqG9RFmZ.png" alt="clip_image023.png"></p>
<p>•      A必须等待2MSL的时间</p>
<p>•      为了保证A发送的最后一一个ACK报文段能够到达B。</p>
<p>•      防止已失效的连接请求报文段” 出现在本连接中。</p>
<p>•      数据传输结束后，通信的双方都可释放连接。</p>
<h3 id="TCP的有限状态机"><a href="#TCP的有限状态机" class="headerlink" title="TCP的有限状态机"></a>TCP的有限状态机</h3><p>·         </p>
<p><img src="https://i.loli.net/2020/06/11/5jDLVlCMArvtFca.png" alt="clip_image024.png"></p>
<p>•      粗实线箭头表示对客户进程的正常变迁。<br> 粗虚线箭头表示对服务器进程的正常变迁。<br> 另一种细线箭头表示异常变迁。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>计网笔记</tag>
        <tag>运输层</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode笔记</title>
    <url>/leetcode%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">


<p><strong>以下题目均为leetcode的题目，仅作为个人笔记，侵权必删。</strong></p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h3><h4 id="删除最外层的括号"><a href="#删除最外层的括号" class="headerlink" title="删除最外层的括号"></a><a href="https://leetcode-cn.com/problems/remove-outermost-parentheses">删除最外层的括号</a></h4><p>有效括号字符串为空 (“”)、”(“ + A + “)” 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，””，”()”，”(())()” 和 “(()(()))” 都是有效的括号字符串。</p>
<p>如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。</p>
<p>给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + … + P_k，其中 P_i 是有效括号字符串原语。</p>
<p>对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。</p>
<p><strong>思路：栈判断是否组成完整的原语，直接substr消除最外层的符号。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">removeOuterParentheses</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> stackint=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(S[i]==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                stackint++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stackint--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stackint==<span class="number">0</span>)&#123;</span><br><span class="line">               res=res+S.substr(left+<span class="number">1</span>,i-left<span class="number">-1</span>);</span><br><span class="line">               left=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="最小栈"><a href="#最小栈" class="headerlink" title="最小栈"></a><a href="https://leetcode-cn.com/problems/min-stack">最小栈</a></h4><p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p>
<p>push(x) —— 将元素 x 推入栈中。<br>pop() —— 删除栈顶的元素。<br>top() —— 获取栈顶元素。<br>getMin() —— 检索栈中的最小元素。</p>
<p><strong>思路：设计一个辅助栈，给每个元素都配上一个当前最小值，跟随原来栈来增减.</strong></p>
<p>$\textcolor{red}{注意点:辅助栈要先放入一个最大值，在第一个元素放入的时候方便更新。}$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    Deque&lt;Integer&gt; MainStack;</span><br><span class="line">    Deque&lt;Integer&gt; assistStack;	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MainStack=<span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        assistStack=<span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        assistStack.push(Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        MainStack.push(x);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;assistStack.peek())</span><br><span class="line">            assistStack.push(x);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            assistStack.push(assistStack.peek());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MainStack.pop();</span><br><span class="line">        assistStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MainStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> assistStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="比较含退格的字符串"><a href="#比较含退格的字符串" class="headerlink" title="比较含退格的字符串"></a><a href="https://leetcode-cn.com/problems/backspace-string-compare">比较含退格的字符串</a></h4><p>给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 # 代表退格字符。</p>
<p>注意：如果对空文本输入退格字符，文本继续为空。</p>
<p>示例 1：</p>
<p>输入：S = “ab#c”, T = “ad#c”<br>输出：true<br>解释：S 和 T 都会变成 “ac”。</p>
<p>思路：模拟，遇到‘#’就判断栈是否为空，不空则弹出，遇到其他符号就入栈。</p>
<p>时间复杂度O(n+m)</p>
<p>空间复杂度O(n+m)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">backspaceCompare</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s1;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!s1.empty())</span><br><span class="line">                    s1.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> s1.push(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;t.size();k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t[k]==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!s2.empty())</span><br><span class="line">                    s2.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> s2.push(t[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1==s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>思路2：从后往前遍历，每次都先jump到有效位置，进行比较。</p>
<p>注意：①跳过的时候要看跳的时候是否有‘#’。</p>
<p>​            ②要两个字符串分析完才能结束。</p>
<p>时间复杂度O(n+m)</p>
<p>空间复杂度O(1)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int jump(string &amp; str ,int i)&#123;</span><br><span class="line">        int count&#x3D;0;</span><br><span class="line">        while(i&gt;&#x3D;0)&#123;</span><br><span class="line">            if(str[i]&#x3D;&#x3D;&#39;#&#39;)</span><br><span class="line">                count++;</span><br><span class="line">            else if(count)</span><br><span class="line">                --count;</span><br><span class="line">            else break;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        return i;</span><br><span class="line">    &#125;</span><br><span class="line">    bool backspaceCompare(string s, string t) &#123;</span><br><span class="line">        int i&#x3D;s.size()-1;</span><br><span class="line">        int j&#x3D;t.size()-1;</span><br><span class="line">        while(i&gt;&#x3D;0||j&gt;&#x3D;0)&#123;</span><br><span class="line">            i&#x3D;jump(s,i);</span><br><span class="line">            j&#x3D;jump(t,j);</span><br><span class="line">            if(i&lt;0||j&lt;0) break;</span><br><span class="line">            if(s[i--]!&#x3D;t[j--])return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return i&lt;0&amp;&amp;j&lt;0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="整理字符串"><a href="#整理字符串" class="headerlink" title="整理字符串"></a><a href="https://leetcode-cn.com/problems/make-the-string-great/">整理字符串</a></h4><p>一个整理好的字符串中，两个相邻字符 s[i] 和 s[i+1]，其中 0&lt;= i &lt;= s.length-2 ，要满足如下条件:</p>
<p>若 s[i] 是小写字符，则 s[i+1] 不可以是相同的大写字符。<br>若 s[i] 是大写字符，则 s[i+1] 不可以是相同的小写字符。</p>
<p>思路用栈保存要保留的字符，遇到相同的（不同大小写的）就弹出，否则加入。</p>
<p>时间复杂度O(n)</p>
<p>空间复杂度O(n)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">makeGood</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.size()&lt;<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st.empty())</span><br><span class="line">                st.push(s[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]-<span class="string">&#x27;a&#x27;</span>==st.top()-<span class="string">&#x27;A&#x27;</span>||s[i]-<span class="string">&#x27;A&#x27;</span>==st.top()-<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">                st.pop();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                st.push(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">            ans+=st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>优化后的 string当st用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">makeGood</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!ans.empty()&amp;&amp;((<span class="keyword">char</span>)(ans.back()) ^ s[i]) == <span class="number">32</span>)</span><br><span class="line">                ans.pop_back();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans.push_back(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal">二叉树的后序遍历</a></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode* prev=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="literal">nullptr</span>||!st.empty())&#123;	<span class="comment">//栈中还有节点或者根节点不为空可以继续遍历</span></span><br><span class="line">            <span class="keyword">while</span>(root)&#123;</span><br><span class="line">                st.emplace(root);	<span class="comment">//先存所有左孩子</span></span><br><span class="line">                root=root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            root=st.top();	<span class="comment">//取出最后的左孩子或者是root本身</span></span><br><span class="line">            st.pop();</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;right==<span class="literal">nullptr</span>||root-&gt;right==prev)&#123;	<span class="comment">//右孩子为空或者右树已经访问完毕</span></span><br><span class="line">                ans.emplace_back(root-&gt;val);<span class="comment">//访问根节点</span></span><br><span class="line">                prev=root;</span><br><span class="line">                root=<span class="literal">nullptr</span>;	<span class="comment">//取下一个栈中的节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                st.emplace(root);	<span class="comment">//存放根节点</span></span><br><span class="line">                root=root-&gt;right;	<span class="comment">//访问右树</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">二叉树的中序遍历</a></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="literal">nullptr</span>||!st.empty())&#123;		<span class="comment">//栈中还有节点或者根节点不为空可以继续遍历</span></span><br><span class="line">            <span class="keyword">while</span>(root)&#123;</span><br><span class="line">                st.emplace(root);		<span class="comment">//先存所有左孩子</span></span><br><span class="line">                root=root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            root=st.top();	<span class="comment">//取出最后的左孩子或者是root本身</span></span><br><span class="line">            st.pop();</span><br><span class="line">            ans.emplace_back(root-&gt;val);	<span class="comment">//访问根节点</span></span><br><span class="line">            root=root-&gt;right;    <span class="comment">//访问右树</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="二叉树的前序遍历"><a href="#二叉树的前序遍历" class="headerlink" title="二叉树的前序遍历"></a>二叉树的前序遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="literal">nullptr</span>||!st.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(root)&#123;</span><br><span class="line">                ans.emplace_back(root-&gt;val);</span><br><span class="line">                st.emplace(root);</span><br><span class="line">                root=root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            root=st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            root=root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><h3 id="easy"><a href="#easy" class="headerlink" title="easy"></a>easy</h3><h4 id="和为s的连续正数序列"><a href="#和为s的连续正数序列" class="headerlink" title="和为s的连续正数序列"></a><a href="https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/">和为s的连续正数序列</a></h4><p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</p>
<p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：target &#x3D; 9</span><br><span class="line">输出：[[2,3,4],[4,5]]</span><br></pre></td></tr></table></figure>

<p>思路:滑动窗口，三种情况。</p>
<p>① 当当前窗口比target小时，窗口右端点右移。</p>
<p>② 当当前窗口比target大时，窗口左端点右移。</p>
<p>③ 当当前窗口等于target时，窗口左端点右移。</p>
<p>其中要一直保持左端点小于右端点。</p>
<p>注意：右端点上界为target/2+1,超过之后两个数相加就肯定大于target。</p>
<p>时间复杂度O(target)</p>
<p>空间复杂度O(1)</p>
<p>求和公式版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; findContinuousSequence(<span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&gt;l)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum=(l+r)*(r-l+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; newlist;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;=r;j++)</span><br><span class="line">                    newlist.emplace_back(j);</span><br><span class="line">                ans.emplace_back(newlist);</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;target)++r;</span><br><span class="line">            <span class="keyword">else</span> ++l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>移动窗口调整sum版</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; findContinuousSequence(<span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">2</span>,sum=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&gt;l)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; newlist;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;=r;++j)</span><br><span class="line">                    newlist.emplace_back(j);</span><br><span class="line">                ans.emplace_back(newlist);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum&lt;target)&#123;	<span class="comment">//注意加的顺序</span></span><br><span class="line">                ++r;</span><br><span class="line">                sum+=r;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;			<span class="comment">//注意减的顺序</span></span><br><span class="line">                sum-=l;</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><h4 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></h4><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s &#x3D; &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure>

<p>思路：滑动窗口，set存放窗口内的字母。 将i , j分别作为窗口的左右边界，没有遇到重复的就 j 右移，直到遇到\n或者在窗口内存放的字母。i右移直到遇到刚才j遇到重复字母。如此循环，在过程中记录窗口大小。</p>
<p>时间复杂度O(N)</p>
<p>空间复杂度O(|$$\sum{Z}$$|)字符集大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>,ans=<span class="number">0</span>,len=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; st;	<span class="comment">//窗口里的字母</span></span><br><span class="line">        <span class="keyword">while</span>(r&lt;s.size())&#123;</span><br><span class="line">            <span class="comment">//窗口找不到当前右边界字母并且右边界没到字符串末尾</span></span><br><span class="line">            <span class="keyword">while</span>(r&lt;s.size()&amp;&amp;st.find(s[r])==st.end())</span><br><span class="line">                st.insert(s[r++]);	<span class="comment">//加入窗口并更新边界</span></span><br><span class="line">            ans=max(ans,r-l);	<span class="comment">//更新窗口最大值</span></span><br><span class="line">            <span class="keyword">while</span>(r&gt;=l)&#123;</span><br><span class="line">                st.erase(s[l]);</span><br><span class="line">                <span class="keyword">if</span>(s[l++]==s[r])<span class="keyword">break</span>;	<span class="comment">//刚才删掉了与有边界遇到的相同字符可以退出了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h3><h4 id="最小覆盖子串"><a href="#最小覆盖子串" class="headerlink" title="最小覆盖子串"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/">最小覆盖子串</a></h4><p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p>
<p>注意：如果 s 中存在这样的子串，我们保证它是唯一的答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;ADOBECODEBANC&quot;</span>, t = <span class="string">&quot;ABC&quot;</span></span><br><span class="line">输出：<span class="string">&quot;BANC&quot;</span></span><br></pre></td></tr></table></figure>

<p>思路：当没有覆盖t全部字母时，right右移，覆盖完了，left左移，记录区间长度最小值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;&amp; Scount,<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;&amp; Tcount)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it=Scount.begin();</span><br><span class="line">        <span class="keyword">while</span>(it!=Scount.end())&#123;</span><br><span class="line">            <span class="keyword">if</span>((it-&gt;second)&gt;(Tcount[it-&gt;first]))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">minWindow</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; Scount;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; Tcount;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Scount.find(t[i])==Scount.end())&#123;</span><br><span class="line">                Scount[t[i]]=<span class="number">0</span>;</span><br><span class="line">                Tcount[t[i]]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Scount[t[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=s.size()+<span class="number">22</span>;</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!(right&gt;=s.size()&amp;&amp;!check(Scount,Tcount)))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check(Scount,Tcount))&#123;</span><br><span class="line">                <span class="keyword">if</span>(Scount.find(s[right])!=Scount.end())&#123;</span><br><span class="line">                   Tcount[s[right]]++;</span><br><span class="line">                &#125;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(right-left&lt;ans)&#123;</span><br><span class="line">                    index=left;</span><br><span class="line">                    ans=right-left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(Scount.find(s[left])!=Scount.end())&#123;</span><br><span class="line">                    Tcount[s[left]]--;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans==s.size()+<span class="number">22</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s.substr(index,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a>medium</h3><h4 id="解码方法"><a href="#解码方法" class="headerlink" title="解码方法"></a><a href="https://leetcode-cn.com/problems/decode-ways/">解码方法</a></h4><p>一条包含字母 <code>A-Z</code> 的消息通过以下映射进行了 <strong>编码</strong> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;A&#39; -&gt; 1</span><br><span class="line">&#39;B&#39; -&gt; 2</span><br><span class="line">...</span><br><span class="line">&#39;Z&#39; -&gt; 26</span><br></pre></td></tr></table></figure>

<p>要 <strong>解码</strong> 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，<code>&quot;11106&quot;</code> 可以映射为：</p>
<ul>
<li><code>&quot;AAJF&quot;</code> ，将消息分组为 <code>(1 1 10 6)</code></li>
<li><code>&quot;KJF&quot;</code> ，将消息分组为 <code>(11 10 6)</code></li>
</ul>
<p>注意，消息不能分组为 <code>(1 11 06)</code> ，因为 <code>&quot;06&quot;</code> 不能映射为 <code>&quot;F&quot;</code> ，这是由于 <code>&quot;6&quot;</code> 和 <code>&quot;06&quot;</code> 在映射中并不等价。</p>
<p>给你一个只含数字的 <strong>非空</strong> 字符串 <code>s</code> ，请计算并返回 <strong>解码</strong> 方法的 <strong>总数</strong> 。</p>
<p>题目数据保证答案肯定是一个 <strong>32 位</strong> 的整数。</p>
<p>思路：动态规划，dp[i]表示0-(i-1)为之间的解码可能总数。第i个字符它可以跟i-1个字符合并为一个数也可以自己作为一个数。</p>
<p>注意：以上两种情况可以同时满足。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(s.size()+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;	<span class="comment">//空串</span></span><br><span class="line">        <span class="keyword">if</span>(s.size()&gt;=<span class="number">1</span>)</span><br><span class="line">            dp[<span class="number">1</span>]=(s[<span class="number">0</span>]==<span class="string">&#x27;0&#x27;</span>?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=stoi(s.substr(i<span class="number">-2</span>,<span class="number">2</span>));</span><br><span class="line">            <span class="keyword">if</span>(tmp&gt;=<span class="number">10</span>&amp;&amp;tmp&lt;=<span class="number">26</span>)	<span class="comment">//说明是两位数</span></span><br><span class="line">                dp[i]+=dp[i<span class="number">-2</span>];</span><br><span class="line">            <span class="keyword">if</span>(s[i<span class="number">-1</span>]!=<span class="string">&#x27;0&#x27;</span>)			<span class="comment">//除了自己是0以外，都可以自己作为一个数解码</span></span><br><span class="line">                dp[i]+=dp[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.size()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="股票的最大利润"><a href="#股票的最大利润" class="headerlink" title="股票的最大利润"></a><a href="https://leetcode-cn.com/problems/gu-piao-de-zui-da-li-run-lcof/">股票的最大利润</a></h4><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">买卖股票的最佳时机</a></p>
<p>与上面一道题相同。</p>
<p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？ </p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。</span><br><span class="line">     注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格。</span><br></pre></td></tr></table></figure>

<p>思路：当天的最大利润=今天的价格-历史最低价。dp[i]表示前i天最多能获得的利润。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.size()&lt;<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dpnum=<span class="number">0</span>;    <span class="comment">//前0天能获得的利润</span></span><br><span class="line">        <span class="keyword">int</span> historyMinCost=prices[<span class="number">0</span>];  <span class="comment">//历史最低价</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.size();i++)&#123;</span><br><span class="line">            <span class="comment">//前i-1天最大利润和今天能获得的最大利润比较</span></span><br><span class="line">            <span class="keyword">int</span> curMax=max(dpnum,prices[i]-historyMinCost);</span><br><span class="line">            <span class="comment">//更新历史最低利润 </span></span><br><span class="line">            historyMinCost=min(historyMinCost,prices[i]);</span><br><span class="line">            <span class="comment">//更新前i-1天的记录</span></span><br><span class="line">            dpnum=curMax;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dpnum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="hard-1"><a href="#hard-1" class="headerlink" title="hard"></a>hard</h3><h4 id="最大子矩阵"><a href="#最大子矩阵" class="headerlink" title="最大子矩阵"></a><a href="https://leetcode-cn.com/problems/max-submatrix-lcci/">最大子矩阵</a></h4><p>给定一个正整数、负整数和 0 组成的 N × M 矩阵，编写代码找出元素总和最大的子矩阵。</p>
<p>返回一个数组 <code>[r1, c1, r2, c2]</code>，其中 <code>r1</code>, <code>c1</code> 分别代表子矩阵左上角的行号和列号，<code>r2</code>, <code>c2</code> 分别代表右下角的行号和列号。若有多个满足条件的子矩阵，返回任意一个均可。</p>
<p><strong>注意：</strong>本题相对书上原题稍作改动</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[</span><br><span class="line">   [-1,0],</span><br><span class="line">   [0,-1]</span><br><span class="line">]</span><br><span class="line">输出：[0,1,0,1]</span><br><span class="line">解释：输入中标粗的元素即为输出所表示的矩阵</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>1 &lt;= matrix.length, matrix[0].length &lt;= 200</code></li>
</ul>
<p>思路：压缩二维数组的列使其为一维数组，然后动态规划求一维数组的最大字序和，就可以求出该二维数组固定高（这里的高就是二维数组的高度）的子矩阵的最大值。</p>
<p>然后套两层循环来遍历所有的高，i为上高，j为下底，有了i和j就可以唯一确定矩阵的高。</p>
<p>时间复杂度O（$$nm^2$$）</p>
<p>空间复杂度O（$$n$$）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">getMaxMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r1,c1,r2,c2,maxval=INT_MIN;			<span class="comment">//初始化矩阵最大值</span></span><br><span class="line">        <span class="keyword">int</span> m=matrix.size(),n=matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> tmp1,tmp2;		<span class="comment">//用于保存求一维数组最大字段和的起点。</span></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">colsum</span><span class="params">(n,<span class="number">0</span>)</span></span>;		<span class="comment">//压缩后的一维矩阵</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;			<span class="comment">//遍历上高</span></span><br><span class="line">            fill(colsum.begin(),colsum.end(),<span class="number">0</span>);	<span class="comment">//上高变化时，将一维数组初始化</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;m;++j)&#123;		<span class="comment">//遍历下底</span></span><br><span class="line">                <span class="keyword">int</span> sum=<span class="number">0</span>;			<span class="comment">//开始求最大字序和</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;++k)&#123;	</span><br><span class="line">                    colsum[k]+=matrix[j][k];</span><br><span class="line">                    <span class="keyword">if</span>(sum&gt;<span class="number">0</span>)&#123;		<span class="comment">//前面的+现在的 可以变得更大</span></span><br><span class="line">                        sum+=colsum[k];</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;			<span class="comment">//抛弃前面的，从现在开始重新计算</span></span><br><span class="line">                        sum=colsum[k];</span><br><span class="line">                        tmp1=i;		<span class="comment">//记录上高</span></span><br><span class="line">                        tmp2=k;		<span class="comment">//记录左边界</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(maxval&lt;sum)&#123;		<span class="comment">//更新答案</span></span><br><span class="line">                        maxval=sum;	</span><br><span class="line">                        r1=tmp1;		<span class="comment">//拿到之前记录的上高</span></span><br><span class="line">                        c1=tmp2;		<span class="comment">//拿到之前记录的左边界</span></span><br><span class="line">                        r2=j;			<span class="comment">//记录当前的下底</span></span><br><span class="line">                        c2=k;			<span class="comment">//记录当前的右边界</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;r1,c1,r2,c2&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><h3 id="easy-1"><a href="#easy-1" class="headerlink" title="easy"></a>easy</h3><h4 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a><a href="https://leetcode-cn.com/problems/reverse-integer/">整数反转</a></h4><p>难度简单2799</p>
<p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p>
<p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−231, 231 − 1]</code> ，就返回 0。</p>
<p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p>
<p> <strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x &#x3D; 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x &#x3D; -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure>

<p>思路：将个十百千位依次读出，然后重新组成一个反转的数。</p>
<p>注意反转后可能溢出INT范围。</p>
<p>①在组成过程中，可以判断组成前的数是不是大于INT/10，大于的话，继续组下一位的时候就会溢出</p>
<p>②由于INT_MAX的个位是7,INT_MIN的个尾是8。</p>
<p>那么当x的最高位大于7并且x是与INT_MAX有相同的位数时，反转出来就会溢出。</p>
<p>但是这种情况在本题不存在，由于x是INT范围内的数，那么x与INT_MAX有相同的位数时，x的最高位必然只有1，2两种选择。</p>
<p>所以只有情况①才可能溢出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans&gt;INT_MAX/<span class="number">10</span>||ans&lt;INT_MIN/<span class="number">10</span>) <span class="comment">//溢出</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            ans*=<span class="number">10</span>;	<span class="comment">//腾出个位来</span></span><br><span class="line">            ans+=x%<span class="number">10</span>;	<span class="comment">//将x的末位添加到ans</span></span><br><span class="line">            x/=<span class="number">10</span>;		<span class="comment">//删除x的末位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="mindium"><a href="#mindium" class="headerlink" title="mindium"></a>mindium</h3><h4 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a><a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">顺时针打印矩阵</a></h4><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：matrix &#x3D; [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure>

<p><strong>限制：</strong></p>
<ul>
<li><code>0 &lt;= matrix.length &lt;= 100</code></li>
<li><code>0 &lt;= matrix[i].length &lt;= 100</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> m=matrix.size();</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">int</span> n=matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dir=&#123;n,m<span class="number">-1</span>,n<span class="number">-1</span>,m<span class="number">-2</span>&#125;;<span class="comment">//初始化第一圈要跳的步数</span></span><br><span class="line">        <span class="keyword">int</span> xx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;	<span class="comment">//x的变化方向</span></span><br><span class="line">        <span class="keyword">int</span> yy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;	<span class="comment">//y的变化方向</span></span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">-1</span>;	<span class="comment">//要先从外面跳进去</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;	<span class="comment">//决定现在的方向</span></span><br><span class="line">                <span class="keyword">if</span>(!dir[i]) <span class="keyword">return</span> ans;	<span class="comment">//不需要跳了，返回答案</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dir[i];++j)&#123;<span class="comment">//开始跳dir[i]步</span></span><br><span class="line">                    x+=xx[i];</span><br><span class="line">                    y+=yy[i];</span><br><span class="line">                    ans.emplace_back(matrix[x][y]);</span><br><span class="line">                &#125;</span><br><span class="line">                dir[i]-=<span class="number">2</span>;<span class="comment">//内层每个方向要跳的步数减少二</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="把字符串转换成整数"><a href="#把字符串转换成整数" class="headerlink" title="把字符串转换成整数"></a><a href="https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/">把字符串转换成整数</a></h4><p>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。</p>
<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p>
<p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>
<p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p>
<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p>
<p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>
<p><strong>说明：</strong></p>
<p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>
<p>思路：模拟遍历。</p>
<p>判断越界的时候利用<strong>已获得的前缀和当前数字</strong>去比较INT最大最小值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strToInt</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> isNagetive=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(str[i]==<span class="string">&#x27; &#x27;</span>)i++;  <span class="comment">//跳过前面的空格,这里不会越界,因为最后有\n</span></span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;-&#x27;</span>)&#123;        <span class="comment">//负数</span></span><br><span class="line">            i++;</span><br><span class="line">            isNagetive=<span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;+&#x27;</span>)i++;   <span class="comment">//正数</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;str.size();++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=str[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(tmp&lt;=<span class="number">9</span>&amp;&amp;tmp&gt;=<span class="number">0</span>)&#123; <span class="comment">//当前是数字</span></span><br><span class="line">                <span class="comment">/*现在的前缀大于最大(小)值前缀,或者现在的前缀等于最大(小)值前缀并且</span></span><br><span class="line"><span class="comment">                最后一位大于7的时候越界*/</span></span><br><span class="line">                <span class="keyword">if</span>(ans&gt;INT_MAX/<span class="number">10</span>||ans==INT_MAX/<span class="number">10</span>&amp;&amp;tmp&gt;<span class="number">7</span>)&#123; </span><br><span class="line">                    <span class="keyword">return</span> isNagetive?INT_MIN:INT_MAX;</span><br><span class="line">                &#125;</span><br><span class="line">                ans=ans*<span class="number">10</span>+tmp;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">break</span>;    <span class="comment">//遍历到不是数字了,返回答案</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isNagetive?-ans:ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="easy-2"><a href="#easy-2" class="headerlink" title="easy"></a>easy</h3><h4 id="叶子相似的树"><a href="#叶子相似的树" class="headerlink" title="叶子相似的树"></a><a href="https://leetcode-cn.com/problems/leaf-similar-trees/">叶子相似的树</a></h4><p>难度简单142</p>
<p>请考虑一棵二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个 <em>叶值序列</em> 。</p>
<p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png" alt="img"></p>
<p>举个例子，如上图所示，给定一棵叶值序列为 <code>(6, 7, 4, 9, 8)</code> 的树。</p>
<p>如果有两棵二叉树的叶值序列是相同，那么我们就认为它们是 <em>叶相似</em> 的。</p>
<p>如果给定的两个根结点分别为 <code>root1</code> 和 <code>root2</code> 的树是叶相似的，则返回 <code>true</code>；否则返回 <code>false</code> 。</p>
<p>思路：前序遍历可以按左到右遍历这些叶结点，判断是不是叶结点按顺序加入数组，判断两次得到的数组是否相同得出答案。</p>
<p>时间复杂度O(n+m)n,m分别为两棵树的节点数</p>
<p>空间复杂度O(max(k1+n1,k2+n2))k1，k2分别为两棵树最大深度,n1,n2为叶值序列长度。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">leafSimilar</span><span class="params">(TreeNode* root1, TreeNode* root2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1,v2;</span><br><span class="line">        preorder(root1,v1);</span><br><span class="line">        preorder(root2,v2);</span><br><span class="line">        <span class="keyword">return</span> v1==v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        preorder(root-&gt;left,v);</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left&amp;&amp;!root-&gt;right)</span><br><span class="line">            v.emplace_back(root-&gt;val);</span><br><span class="line">        preorder(root-&gt;right,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="medium-2"><a href="#medium-2" class="headerlink" title="medium"></a>medium</h3><h4 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/">树的子结构</a></h4><p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p>
<p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p>
<p>思路：遍历找到A树所有B树根节点相同值的节点，以A树上的节点作头节点（A‘树），同时遍历A‘树和B树判断B是不是A‘的子结构。</p>
<p>另外的思路：bfs找A树所有B树根节点相同值的节点，再判断。</p>
<p>时间复杂度：O(MN)M为A的节点数，N为B的节点数</p>
<p>空间复杂度：O(M),当树 A 和树 B 都退化为链表时，递归调用深度最大。当 M ≤N 时，遍历树 A 与递归判断的总递归深度为 M ；当 M&gt;N 时，最差情况为遍历至树 A 叶子节点，此时总递归深度为 M。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubStructure</span><span class="params">(TreeNode* A, TreeNode* B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!A||!B)<span class="keyword">return</span> <span class="literal">false</span>;	<span class="comment">//因为B为空不是子结构，而且A为空时，必没有子结构</span></span><br><span class="line">        <span class="comment">//判断A，B树是不是同根的子结构或者看看A的左子树和右子树有没有B的子结构</span></span><br><span class="line">        <span class="keyword">return</span> isSame(A,B)||isSubStructure(A-&gt;left,B)||isSubStructure(A-&gt;right,B);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSame</span><span class="params">(TreeNode* a,TreeNode* b)</span></span>&#123;</span><br><span class="line">        <span class="comment">//实际是遍历B树与A对应</span></span><br><span class="line">        <span class="keyword">if</span>(b==<span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//当前节点相同时，继续判断左右子树</span></span><br><span class="line">        <span class="keyword">if</span>(a&amp;&amp;b&amp;&amp;a-&gt;val==b-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> isSame(a-&gt;left,b-&gt;left)&amp;&amp;isSame(a-&gt;right,b-&gt;right);</span><br><span class="line">        <span class="comment">//当A先为空时，或者A与B不同时，返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>超级压缩版</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubStructure</span><span class="params">(TreeNode* A, TreeNode* B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A&amp;&amp;B&amp;&amp;(isSame(A,B)||isSubStructure(A-&gt;left,B)||isSubStructure(A-&gt;right,B));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSame</span><span class="params">(TreeNode* a,TreeNode* b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!b)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(a&amp;&amp;a-&gt;val==b-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> isSame(a-&gt;left,b-&gt;left)&amp;&amp;isSame(a-&gt;right,b-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="二叉树中和为某一值的路径"><a href="#二叉树中和为某一值的路径" class="headerlink" title="二叉树中和为某一值的路径"></a><a href="https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">二叉树中和为某一值的路径</a></h4><p>输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。</p>
<p><strong>示例:</strong><br>给定如下二叉树，以及目标和 <code>target = 22</code>，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      5</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   8</span><br><span class="line">   &#x2F;   &#x2F; \</span><br><span class="line">  11  13  4</span><br><span class="line"> &#x2F;  \    &#x2F; \</span><br><span class="line">7    2  5   1</span><br></pre></td></tr></table></figure>

<p>返回:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>思路：简单的回溯，记录路径累积值和路径，当target与累计值相同时，保存路径。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; pathSum(TreeNode* root, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">        dfs(root,<span class="number">0</span>,target,tmp);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root,<span class="keyword">int</span> curval,<span class="keyword">int</span> target,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; tmp)</span></span>&#123;	</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left==<span class="literal">nullptr</span>&amp;&amp;root-&gt;right==<span class="literal">nullptr</span>)&#123;		<span class="comment">//叶结点</span></span><br><span class="line">            <span class="keyword">if</span>(target==curval+root-&gt;val)&#123;</span><br><span class="line">                tmp.emplace_back(root-&gt;val);				<span class="comment">//加入叶结点</span></span><br><span class="line">                ans.emplace_back(tmp);						<span class="comment">//保存路径</span></span><br><span class="line">                tmp.pop_back();								<span class="comment">//回溯</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">        tmp.emplace_back(root-&gt;val);				<span class="comment">//加入当前结点</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left)dfs(root-&gt;left,curval+root-&gt;val,target,tmp);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)dfs(root-&gt;right,curval+root-&gt;val,target,tmp);</span><br><span class="line">        tmp.pop_back();			<span class="comment">//回溯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="hard-2"><a href="#hard-2" class="headerlink" title="hard"></a>hard</h3><h4 id="寻找两个正序数组的中位数"><a href="#寻找两个正序数组的中位数" class="headerlink" title="寻找两个正序数组的中位数"></a><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数</a></h4><p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums1 &#x3D; [1,3], nums2 &#x3D; [2]</span><br><span class="line">输出：2.00000</span><br><span class="line">解释：合并数组 &#x3D; [1,2,3] ，中位数 2</span><br></pre></td></tr></table></figure>

<p>思路：找出两个数组中第k小的数来代替找中位数。（两个数组长度总和为偶数则找第k和k+1个数，否则找第k+1个数（k=(len1+len2)/2））。</p>
<p>这里两个数组找第k小的元素的方法是：</p>
<p>从数组1找从index1开始第k/2个的数。</p>
<p>从数组2找从index2开始第k/2个的数。</p>
<p>比较大小，小于等于的那一行的可以排除是第k小的可能性。（因为它最多大于k-2个元素）</p>
<p>怎么排除？</p>
<p>修改相应index（index1，index2）index修改为newindex+1，还有k要减去减去元素的数量。</p>
<p>一直遍历，会出现2种情况。</p>
<p>情况1：找完了其中一个数组，还没找到第k小元素。也就是其中有一个数组所有元素都比第k小元素小。</p>
<p>这时候直接找长数组的index+k个元素就是所求。</p>
<p>情况2：k==1，说明找到了，直接拿最小的index的数。（这里肯定会剩一个以上，因为只会排除小于等于的那一行，另一行必然剩一个以上）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getKthnum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=nums1.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> m=nums2.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> index1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index1==n+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> nums2[index2+k<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(index2==m+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> nums1[index1+k<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> min(nums1[index1],nums2[index2]);</span><br><span class="line">            <span class="keyword">int</span> newindex1=min(n,index1+k/<span class="number">2</span><span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">int</span> newindex2=min(m,index2+k/<span class="number">2</span><span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums1[newindex1]&gt;=nums2[newindex2])&#123;</span><br><span class="line">                k-=newindex2-index2+<span class="number">1</span>;</span><br><span class="line">                index2=newindex2+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                k-=newindex1-index1+<span class="number">1</span>;</span><br><span class="line">                index1=newindex1+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=nums1.size()+nums2.size();</span><br><span class="line">        <span class="keyword">if</span>(count%<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> getKthnum(nums1,nums2,count/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (getKthnum(nums1,nums2,count/<span class="number">2</span>)+getKthnum(nums1,nums2,count/<span class="number">2</span>+<span class="number">1</span>))/<span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="medium-3"><a href="#medium-3" class="headerlink" title="medium"></a>medium</h3><h4 id="制作-m-束花所需的最少天数"><a href="#制作-m-束花所需的最少天数" class="headerlink" title="制作 m 束花所需的最少天数"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-make-m-bouquets/">制作 m 束花所需的最少天数</a></h4><p>给你一个整数数组 <code>bloomDay</code>，以及两个整数 <code>m</code> 和 <code>k</code> 。</p>
<p>现需要制作 <code>m</code> 束花。制作花束时，需要使用花园中 <strong>相邻的 <code>k</code> 朵花</strong> 。</p>
<p>花园中有 <code>n</code> 朵花，第 <code>i</code> 朵花会在 <code>bloomDay[i]</code> 时盛开，<strong>恰好</strong> 可以用于 <strong>一束</strong> 花中。</p>
<p>请你返回从花园中摘 <code>m</code> 束花需要等待的最少的天数。如果不能摘到 <code>m</code> 束花则返回 <strong>-1</strong> 。</p>
<p>思路：对bloomDay数组范围二分，寻找满足条件的一个天数。</p>
<p>注意找到可行解后，可能还有更优解。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; bloomDay, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> right=*max_element(bloomDay.begin(),bloomDay.end());</span><br><span class="line">        <span class="keyword">int</span> left=*min_element(bloomDay.begin(),bloomDay.end());</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> bloomcount=<span class="number">0</span>,conbloom=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bloomDay.size();++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bloomDay[i]&lt;=mid)&#123;</span><br><span class="line">                    ++conbloom;</span><br><span class="line">                    <span class="keyword">if</span>(conbloom==k)&#123;</span><br><span class="line">                        conbloom=<span class="number">0</span>;</span><br><span class="line">                        ++bloomcount;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    conbloom=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bloomcount&gt;=m)&#123;</span><br><span class="line">                ans=mid;</span><br><span class="line">                right=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(bloomcount&lt;m)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="回文"><a href="#回文" class="headerlink" title="回文"></a>回文</h2><h3 id="easy-3"><a href="#easy-3" class="headerlink" title="easy"></a>easy</h3><h4 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a><a href="https://leetcode-cn.com/problems/palindrome-number/">回文数</a></h4><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，<code>121</code> 是回文，而 <code>123</code> 不是。</p>
<p> <strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x &#x3D; 121</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x &#x3D; -121</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p>思路1：先转字符串，然后前后判断。</p>
<p>思路2：把后面一半的数拿出来倒过来组成新的数，看看是不是与前面半段相等。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x%<span class="number">10</span>==<span class="number">0</span>&amp;&amp;x!=<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//非0的末尾位是0的数和负数</span></span><br><span class="line">        <span class="built_in">string</span> str=to_string(x);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=str.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;l&lt;r;++l,--r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[l]!=str[r])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x%<span class="number">10</span>==<span class="number">0</span>&amp;&amp;x!=<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> reverseNum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(reverseNum&lt;x)&#123;		<span class="comment">//一直判断到中间</span></span><br><span class="line">            reverseNum*=<span class="number">10</span>;			<span class="comment">//先空出个位</span></span><br><span class="line">            reverseNum+=x%<span class="number">10</span>;		<span class="comment">//取x的最后一位</span></span><br><span class="line">            x/=<span class="number">10</span>;					<span class="comment">//去掉x最后一位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reverseNum==x||(reverseNum/<span class="number">10</span>==x);<span class="comment">//偶数和单数个数字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="验证回文串"><a href="#验证回文串" class="headerlink" title="验证回文串"></a><a href="https://leetcode-cn.com/problems/valid-palindrome/">验证回文串</a></h4><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>
<p><strong>说明：</strong>本题中，我们将空字符串定义为有效的回文串。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p>思路1：直接存反转后的判断二者是不是相等。</p>
<p>时间复杂度O（N）</p>
<p>空间复杂度O（N）</p>
<p>思路2：双指针</p>
<p>双指针放在前后，往中间判断，不同就返回false。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">       <span class="built_in">string</span> alnumstr=<span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">auto</span> ch:s)&#123;</span><br><span class="line">           <span class="keyword">if</span>(<span class="built_in">isalnum</span>(ch))</span><br><span class="line">                alnumstr+=<span class="built_in">toupper</span>(ch);</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="comment">/* string str_rev=alnumstr;      </span></span><br><span class="line"><span class="comment">     * reverse(str_rev.begin(),str_rev.end());  //反转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">str_rev</span><span class="params">(alnumstr.rbegin(), alnumstr.rend())</span></span>; <span class="comment">//反转</span></span><br><span class="line">        <span class="keyword">return</span> str_rev==alnumstr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=s.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r&amp;&amp;!<span class="built_in">isalnum</span>(s[l]))++l;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r&amp;&amp;!<span class="built_in">isalnum</span>(s[r]))--r;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">toupper</span>(s[l])!=<span class="built_in">toupper</span>(s[r]))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><h3 id="medium-4"><a href="#medium-4" class="headerlink" title="medium"></a>medium</h3><h4 id="解码异或后的排列"><a href="#解码异或后的排列" class="headerlink" title="解码异或后的排列"></a><a href="https://leetcode-cn.com/problems/decode-xored-permutation/">解码异或后的排列</a></h4><p>给你一个整数数组 <code>perm</code> ，它是前 <code>n</code> 个正整数的排列，且 <code>n</code> 是个 <strong>奇数</strong> 。</p>
<p>它被加密成另一个长度为 <code>n - 1</code> 的整数数组 <code>encoded</code> ，满足 <code>encoded[i] = perm[i] XOR perm[i + 1]</code> 。比方说，如果 <code>perm = [1,3,2]</code> ，那么 <code>encoded = [2,1]</code> 。</p>
<p>给你 <code>encoded</code> 数组，请你返回原始数组 <code>perm</code> 。题目保证答案存在且唯一。</p>
<p> <strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：encoded &#x3D; [3,1]</span><br><span class="line">输出：[1,2,3]</span><br><span class="line">解释：如果 perm &#x3D; [1,2,3] ，那么 encoded &#x3D; [1 XOR 2,2 XOR 3] &#x3D; [3,1]</span><br></pre></td></tr></table></figure>

<p>思路：先求出1-n的异或allxor。allxor=encoded[0]^encoded[1]^encoded[2]····^encoded[n-1] ①</p>
<p>perm[0]=encoded[0]^encoded[1]</p>
<p>perm[1]=encoded[1]^encoded[2]  ②</p>
<p>perm[3]=encoded[3]^encoded[4]  ③</p>
<p>perm[5]=encoded[5]^encoded[6]  ④</p>
<p>将②③④等奇数序号perm代入①得</p>
<p>allxor=encoded[0]^perm[1]^perm[3]^perm[5]·······</p>
<p>求出xor1toN=perm[1]^perm[3]^perm[5]·······</p>
<p>那么encoded[0]=xor1toN^allxor</p>
<p>由encoded[0]^encoded[1]=perm[0]得</p>
<p>encoded[1]=encoded[0]^perm[0]。</p>
<p>如此类推。</p>
<p>注意前1-n的异或可以O（1）得出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n%<span class="number">4</span>)&#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0</span>:allxor=n+<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:allxor=<span class="number">1</span>;  <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:allxor=n+<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">3</span>:allxor=<span class="number">0</span>;  <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>拓展：同理 k-n的连续异或(knxor)也可以由1-k的异或(kxor)和1-n(nxor)的异或求出。</p>
<p>knxor=kxor^nxor</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">decode</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; encoded)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> allxor=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// for(int i=1;i&lt;=encoded.size()+1;i++)	</span></span><br><span class="line">        <span class="comment">//     allxor^=i;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n=encoded.size()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span>(n%<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:allxor=n+<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:allxor=<span class="number">1</span>;  <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:allxor=n+<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:allxor=<span class="number">0</span>;  <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> xor1toN=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;encoded.size();i+=<span class="number">2</span>)</span><br><span class="line">            xor1toN^=encoded[i];</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> tmp=allxor^xor1toN;</span><br><span class="line">        ans.emplace_back(tmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:encoded)</span><br><span class="line">            ans.emplace_back(tmp^=x);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="找出第-K-大的异或坐标值"><a href="#找出第-K-大的异或坐标值" class="headerlink" title="找出第 K 大的异或坐标值"></a><a href="https://leetcode-cn.com/problems/find-kth-largest-xor-coordinate-value/">找出第 K 大的异或坐标值</a></h4><p>给你一个二维矩阵 <code>matrix</code> 和一个整数 <code>k</code> ，矩阵大小为 <code>m x n</code> 由非负整数组成。</p>
<p>矩阵中坐标 <code>(a, b)</code> 的 <strong>值</strong> 可由对所有满足 <code>0 &lt;= i &lt;= a &lt; m</code> 且 <code>0 &lt;= j &lt;= b &lt; n</code> 的元素 <code>matrix[i][j]</code>（<strong>下标从 0 开始计数</strong>）执行异或运算得到。</p>
<p>请你找出 <code>matrix</code> 的所有坐标中第 <code>k</code> 大的值（<strong><code>k</code> 的值从 1 开始计数</strong>）。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：matrix &#x3D; [[5,2],[1,6]], k &#x3D; 1</span><br><span class="line">输出：7</span><br><span class="line">解释：坐标 (0,1) 的值是 5 XOR 2 &#x3D; 7 ，为最大的值。</span><br></pre></td></tr></table></figure>

<p>思路：要求异或坐标值需要左上角所有的元素（包括自己的行和列和自己）异或和。要求matrix [i] [j]时matrix [i-1] [j-1]和matrix [i-1] [j]和matrix [i] [j-1]都已经求得，而matrix [i] [j-1]和matrix [i-1] [j]区域重合了matrix [i-1] [j-1]的区域，所以要求matrix [i] [j]需要补上matrix [i-1] [j-1]区域所以得出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">matrix[i][j]=matrix[i][j]^matrix[i<span class="number">-1</span>][j]^matrix[i][j<span class="number">-1</span>]^matrix[i][j]</span><br></pre></td></tr></table></figure>

<p>然后就是求出第k大元素，用堆(nmlogk)或者快速选择算法（nm，最坏nm^2），或者排序（nmlognm）都可以。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kthLargestValue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m=matrix.size();</span><br><span class="line">        <span class="keyword">int</span> n=matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; helper;</span><br><span class="line">        helper.emplace_back(matrix[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;++i)&#123;		<span class="comment">//求第一列</span></span><br><span class="line">            matrix[i][<span class="number">0</span>]=matrix[i][<span class="number">0</span>]^matrix[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">            helper.emplace_back(matrix[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;		<span class="comment">//求第一行</span></span><br><span class="line">            matrix[<span class="number">0</span>][i]=matrix[<span class="number">0</span>][i]^matrix[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line">            helper.emplace_back(matrix[<span class="number">0</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                matrix[i][j]^=matrix[i<span class="number">-1</span>][j]^matrix[i][j<span class="number">-1</span>]^matrix[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                helper.emplace_back(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nth_element(helper.begin(),helper.begin()+k<span class="number">-1</span>,helper.end(),greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        <span class="keyword">return</span> helper[k<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2><h3 id="medium-5"><a href="#medium-5" class="headerlink" title="medium"></a>medium</h3><h4 id="数组中两个数的最大异或值"><a href="#数组中两个数的最大异或值" class="headerlink" title="数组中两个数的最大异或值"></a><a href="https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/">数组中两个数的最大异或值</a></h4><p>给你一个整数数组 <code>nums</code> ，返回 <code>nums[i] XOR nums[j]</code> 的最大运算结果，其中 <code>0 ≤ i ≤ j &lt; n</code> 。</p>
<p><strong>进阶：</strong>你可以在 <code>O(n)</code> 的时间解决这个问题吗？</p>
<p> <strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [3,10,5,25,2,8]</span><br><span class="line">输出：28</span><br><span class="line">解释：最大运算结果是 5 XOR 25 &#x3D; 28.</span><br></pre></td></tr></table></figure>

<p>思路：由于题目是选两个数异或，而且还可以选自己跟自己异或所以下界是0。</p>
<p>本题可以使用字典树（前缀树）来做。</p>
<p>将每个数字转成字符串然后从最高位开始存。</p>
<p>构造一个32位树高的前缀树(含一个头节点)。</p>
<p>然后遍历数组想办法从树里找到尽可能每一位跟当前遍历到的数（x）相反的数(y)。</p>
<p>比如101要尽力去找010。</p>
<p>然后比较每一个x^y,找出最大值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>	<span class="comment">//树的节点</span></span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">-1</span>;	<span class="comment">//叶结点会存放在nums数组的序号</span></span><br><span class="line">        node* zero;</span><br><span class="line">        node* one;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">prefixTree</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        node* top;	<span class="comment">//头结点</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        prefixTree()&#123;</span><br><span class="line">            top=<span class="keyword">new</span> node();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> index)</span></span>&#123;<span class="comment">//num加入前缀树，index是num在nums的序号</span></span><br><span class="line">            node* cur=top;			<span class="comment">//当前处理的节点</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;	.<span class="comment">//从最高位开始找</span></span><br><span class="line">                <span class="keyword">int</span> tmp=(num&gt;&gt;i)&amp;<span class="number">1</span>;	<span class="comment">//找到第i位的数  0或者1</span></span><br><span class="line">                <span class="keyword">if</span>(tmp==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!cur-&gt;one)cur-&gt;one=<span class="keyword">new</span> node();	<span class="comment">//没有就构造,下面同理</span></span><br><span class="line">                    cur=cur-&gt;one;		<span class="comment">//更新cur</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!cur-&gt;zero)cur-&gt;zero=<span class="keyword">new</span> node();</span><br><span class="line">                    cur=cur-&gt;zero;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur-&gt;index=index;	<span class="comment">//叶结点存放num在nums的序号。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">findMAXXORnum</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;	<span class="comment">//找到树里尽量每一位和num相反的数</span></span><br><span class="line">            node* cur=top;			<span class="comment">//当前处理的节点</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;	</span><br><span class="line">                <span class="keyword">int</span> tmp=(num&gt;&gt;i)&amp;<span class="number">1</span>;		<span class="comment">//找到num第i位的数  0或者1</span></span><br><span class="line">                <span class="keyword">if</span>(!cur-&gt;one&amp;&amp;!cur-&gt;zero)	<span class="comment">//叶结点返回找到的数在nums的序号</span></span><br><span class="line">                    <span class="keyword">return</span> cur-&gt;index;</span><br><span class="line">                <span class="keyword">if</span>(tmp==<span class="number">1</span>)&#123;			<span class="comment">//1的话转到0</span></span><br><span class="line">                    <span class="keyword">if</span>(cur-&gt;zero) cur=cur-&gt;zero; </span><br><span class="line">                    <span class="keyword">else</span> cur=cur-&gt;one;	<span class="comment">//没有0只能转1</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;				<span class="comment">//0的话转到1</span></span><br><span class="line">                    <span class="keyword">if</span>(cur-&gt;one)cur=cur-&gt;one;</span><br><span class="line">                    <span class="keyword">else</span> cur=cur-&gt;zero;	<span class="comment">//没有1只能转0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cur-&gt;index;	<span class="comment">//叶结点返回找到的数在nums的序号</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaximumXOR</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        prefixTree tree;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)	<span class="comment">//将nums全部加入前缀树</span></span><br><span class="line">            tree.add(nums[i],i);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;		<span class="comment">//下界是0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)&#123;</span><br><span class="line">            <span class="keyword">int</span> index=tree.findMAXXORnum(num);<span class="comment">//找到树里尽量每一位和num相反的数</span></span><br><span class="line">            ans=max(ans,nums[index]^num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>思路2：int31位。从最高位开始找，如果可以设置为1就设置为1。</p>
<p>怎么判断可以设置1？</p>
<p>set存放数组里所有数的前K位。示例：xxxxx?????存放xxxxx</p>
<p>首先先设置为1</p>
<p>可以得到xxxx1????(前面是已经找到的最优解)截取前面的得到xxxx1</p>
<p>数组里其他截取前面的得到abcde</p>
<p>二者相与得到一个fghij，如果fghij在set中说明设置1是可行的。</p>
<p>不然只能设置为0</p>
<p>然后继续判断下一位。</p>
<p>为什么fghij在set中就说明设置1是可行的？</p>
<p>因为前面的fghi也可以在前k-1位set也可以找到。</p>
<p>由此类推。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaximumXOR</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; st;	<span class="comment">//存放nums中的每一个元素的前30-i位。</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)&#123;</span><br><span class="line">                st.insert(num&gt;&gt;i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tmp_ans=ans*<span class="number">2</span>+<span class="number">1</span>;	<span class="comment">//先设置为1</span></span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</span><br><span class="line">                <span class="keyword">if</span>(st.count(tmp_ans^(num&gt;&gt;i)))&#123;		<span class="comment">//找到了</span></span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) ans = tmp_ans;</span><br><span class="line">            <span class="keyword">else</span> ans = tmp_ans - <span class="number">1</span>;			<span class="comment">//没找到就取消设置为1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><h3 id="medium-6"><a href="#medium-6" class="headerlink" title="medium"></a>medium</h3><h4 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a><a href="https://leetcode-cn.com/problems/permutations/">全排列</a></h4><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <strong>所有可能的全排列</strong> 。你可以 <strong>按任意顺序</strong> 返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure>

<p>思路：简单的回溯，依次确定第i位的可能值。确定到最后一位就是一种解。</p>
<p>时间复杂度O（nn!）    </p>
<p>空间复杂度O（n）除了答案数组以外。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; permute(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        len=nums.size();	</span><br><span class="line">        slove(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len<span class="number">-1</span>==i)&#123;		<span class="comment">//判断到了最后一位</span></span><br><span class="line">            ans.emplace_back(nums);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;len;++j)&#123;</span><br><span class="line">            swap(nums[i],nums[j]);	<span class="comment">//将选中的后面的位跟现在i位交换</span></span><br><span class="line">            slove(nums,i+<span class="number">1</span>);		<span class="comment">//找i+1位后的全排列</span></span><br><span class="line">            swap(nums[i],nums[j]);	<span class="comment">//交换回去</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h2><h3 id="medium-7"><a href="#medium-7" class="headerlink" title="medium"></a>medium</h3><h4 id="二叉树的锯齿形层序遍历"><a href="#二叉树的锯齿形层序遍历" class="headerlink" title=" 二叉树的锯齿形层序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/"> 二叉树的锯齿形层序遍历</a></h4><p>给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p>
<p>例如：<br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回锯齿形层序遍历如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>思路：进行普通的层次遍历，将每层结果存在deque，若需要倒序的层，则头插，不然就尾插。然后类型转到vector，</p>
<p>空间复杂度O（n）n为树节点个数</p>
<p>时间复杂度O（n）</p>
<p>提交答案</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; zigzagLevelOrder(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode *&gt; que;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ans;</span><br><span class="line">        que.push(root); </span><br><span class="line">        <span class="keyword">int</span> dep = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> len = que.size();</span><br><span class="line">            <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; valque;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                TreeNode* tmp = que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                <span class="keyword">if</span>(dep%<span class="number">2</span>) <span class="comment">//该层不需要反转</span></span><br><span class="line">                    valque.push_back(tmp-&gt;val);</span><br><span class="line">                <span class="keyword">else</span>	<span class="comment">////该层需要反转</span></span><br><span class="line">                    valque.push_front(tmp-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)</span><br><span class="line">                    que.push(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)</span><br><span class="line">                    que.push(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            dep++;</span><br><span class="line">            ans.emplace_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;valque.begin(),valque.end()&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>思路2：将节点存在deque，下一层需反转的，取队头，然后子节点放在队尾，先放左节点，后放右节点。</p>
<p>​                                     下一层不需翻转的，取队尾，子节点插队头，先放右节点，再放左节点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; zigzagLevelOrder(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">deque</span>&lt;TreeNode*&gt;que;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> ans;</span><br><span class="line">        que.push_back(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmpv1;</span><br><span class="line">            <span class="keyword">int</span> len=que.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                TreeNode* tmp=que.front();</span><br><span class="line">                que.pop_front();</span><br><span class="line">                tmpv1.emplace_back(tmp-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)que.push_back(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)que.push_back(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(tmpv1);</span><br><span class="line">            <span class="keyword">if</span>(que.empty())<span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmpv2;</span><br><span class="line">            len=que.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">                TreeNode* tmp=que.back();</span><br><span class="line">                que.pop_back();</span><br><span class="line">                tmpv2.emplace_back(tmp-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)que.push_front(tmp-&gt;right);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)que.push_front(tmp-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(tmpv2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="环形回路"><a href="#环形回路" class="headerlink" title="环形回路"></a>环形回路</h2><h3 id="medium-8"><a href="#medium-8" class="headerlink" title="medium"></a>medium</h3><h4 id="环形链表-II"><a href="#环形链表-II" class="headerlink" title="环形链表 II"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">环形链表 II</a></h4><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p>
<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意，<code>pos</code> 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</strong></p>
<p><strong>说明：</strong>不允许修改给定的链表。</p>
<p><strong>进阶：</strong></p>
<ul>
<li>你是否可以使用 <code>O(1)</code> 空间解决此题？</li>
</ul>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p>判断链表是否有环，用快慢指针。</p>
<p><img src="https://assets.leetcode-cn.com/solution-static/142/142_fig1.png" alt="图"></p>
<p>$$a+(n+1)b+nc=2(a+b)⟹a=c+(n−1)(b+c)$$</p>
<p>当n=1时a=c</p>
<p>所以在快慢指针相遇时，新建一个头指针，慢指针和新指针同时走相同的步数时，会在入口处相遇</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast=head;<span class="comment">//head指针充当慢指针</span></span><br><span class="line">        ListNode* ans=head;<span class="comment">//新指针</span></span><br><span class="line">        <span class="keyword">while</span>(fast&amp;&amp;fast-&gt;next)&#123;	<span class="comment">//fast指针判空，由于链表数奇偶的关系，需要判断next和fast，这里退出说明无环</span></span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(head==fast)&#123;				<span class="comment">//slow和fast相遇</span></span><br><span class="line">                <span class="keyword">while</span>(ans!=head)&#123;		<span class="comment">//slow和新指针同步向前直到相遇</span></span><br><span class="line">                    head=head-&gt;next;</span><br><span class="line">                    ans=ans-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>栈</tag>
        <tag>滑动窗口</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
</search>
